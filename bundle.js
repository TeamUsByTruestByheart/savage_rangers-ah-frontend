!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=64)}([function(e,t,n){"use strict";e.exports=n(32)},function(e,t,n){e.exports=n(38)()},function(e,t,n){"use strict";var r=n(20),o=n(43),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(36),o=n(10);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(37);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";var r=n(13),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=p(n,y);try{c(t,y,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(33)},function(e,t,n){"use strict";e.exports=n(40)},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,r){var o,i=n(28);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(15),n(41)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(62);e.exports=d,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,E="?"===b||"*"===b,T=n[2]||s,S=y||g;r.push({name:v||i++,prefix:m||"",delimiter:T,optional:E,repeat:k,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(T)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),a+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(2);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(2),o=n(49),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?u=n(24):"undefined"!=typeof XMLHttpRequest&&(u=n(24)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(i)}),e.exports=l}).call(this,n(48))},function(e,t,n){"use strict";var r=n(2),o=n(50),i=n(21),a=n(52),u=n(53),l=n(25);e.exports=function(e){return new Promise(function(t,c){var s=e.data,f=e.headers;r.isFormData(s)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+h)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onabort=function(){p&&(c(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=n(54),v=(e.withCredentials||u(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(f,function(e,t){void 0===s&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===s&&(s=null),p.send(s)})}},function(e,t,n){"use strict";var r=n(51);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],function(e){void 0!==t[e]&&(n[e]=t[e])}),r.forEach(["headers","auth","proxy"],function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])}),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=n(42)},function(e,t,n){"use strict";const r=n(59),o=n(60),i=n(61);function a(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}function u(e,t){return t.decode?o(e):e}function l(e){const t=e.indexOf("#");return-1!==t&&(e=e.slice(0,t)),e}function c(e){const t=(e=l(e)).indexOf("?");return-1===t?"":e.slice(t+1)}function s(e,t){const n=function(e){let t;switch(e.arrayFormat){case"index":return(e,n,r)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===r[e]&&(r[e]={}),r[e][t[1]]=n):r[e]=n};case"bracket":return(e,n,r)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==r[e]?r[e]=[].concat(r[e],n):r[e]=[n]:r[e]=n};case"comma":return(e,t,n)=>{const r="string"==typeof t&&t.split("").indexOf(",")>-1?t.split(","):t;n[e]=r};default:return(e,t,n)=>{void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=Object.assign({decode:!0,sort:!0,arrayFormat:"none",parseNumbers:!1,parseBooleans:!1},t)),r=Object.create(null);if("string"!=typeof e)return r;if(!(e=e.trim().replace(/^[?#&]/,"")))return r;for(const o of e.split("&")){let[e,a]=i(o.replace(/\+/g," "),"=");a=void 0===a?null:u(a,t),t.parseNumbers&&!Number.isNaN(Number(a))&&"string"==typeof a&&""!==a.trim()?a=Number(a):!t.parseBooleans||null===a||"true"!==a.toLowerCase()&&"false"!==a.toLowerCase()||(a="true"===a.toLowerCase()),n(u(e,t),a,r)}return!1===t.sort?r:(!0===t.sort?Object.keys(r).sort():Object.keys(r).sort(t.sort)).reduce((e,t)=>{const n=r[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((e,t)=>Number(e)-Number(t)).map(e=>t[e]):t}(n):e[t]=n,e},Object.create(null))}t.extract=c,t.parse=s,t.stringify=(e,t)=>{if(!e)return"";const n=function(e){switch(e.arrayFormat){case"index":return t=>(n,r)=>{const o=n.length;return void 0===r?n:null===r?[...n,[a(t,e),"[",o,"]"].join("")]:[...n,[a(t,e),"[",a(o,e),"]=",a(r,e)].join("")]};case"bracket":return t=>(n,r)=>void 0===r?n:null===r?[...n,[a(t,e),"[]"].join("")]:[...n,[a(t,e),"[]=",a(r,e)].join("")];case"comma":return t=>(n,r,o)=>null==r||0===r.length?n:0===o?[[a(t,e),"=",a(r,e)].join("")]:[[n,a(r,e)].join(",")];default:return t=>(n,r)=>void 0===r?n:null===r?[...n,a(t,e)]:[...n,[a(t,e),"=",a(r,e)].join("")]}}(t=Object.assign({encode:!0,strict:!0,arrayFormat:"none"},t)),r=Object.keys(e);return!1!==t.sort&&r.sort(t.sort),r.map(r=>{const o=e[r];return void 0===o?"":null===o?a(r,t):Array.isArray(o)?o.reduce(n(r),[]).join("&"):a(r,t)+"="+a(o,t)}).filter(e=>e.length>0).join("&")},t.parseUrl=(e,t)=>({url:l(e).split("?")[0]||"",query:s(c(e),t)})},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(15))},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(19),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function k(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=x.prototype;var T=E.prototype=new k;T.constructor=E,r(T,x.prototype),T.isPureReactComponent=!0;var S={current:null},C={current:null},P=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:C.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,j=[];function A(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function U(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+I(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+I(u,c++),r,o);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),U(e,L,t=A(t,i,r,o)),M(t)}function z(){var e=S.current;return null===e&&g("321"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;U(e,D,t=A(null,null,t,n)),M(t)},count:function(e){return U(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return N(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=C.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:C,assign:r}},B={default:W},$=B&&W||B;e.exports=$.default||$},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(19),i=n(34);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!y[n])for(var r in t.extractEvents||a("97",e),y[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;g.hasOwnProperty(l)&&a("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&v(c[o],u,l);o=!0}else i.registrationName?(v(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){b[e]&&a("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var y=[],g={},b={},w={},x=null,k=null,E=null;function T(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var m=l;u=!1,l=null}else a("198"),m=void 0;c||(c=!0,s=m)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function _(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)T(e,t[r],n[r]);else t&&T(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function R(e){if(null!==e&&(P=S(P,e)),e=P,P=null,e&&(C(e,_),P&&a("95"),c))throw e=s,c=!1,s=null,e}var j=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+j,M="__reactEventHandlers$"+j;function U(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function I(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function L(e){return e[M]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function V(e){C(e,W)}var H=!("undefined"==typeof window||!window.document||!window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},K={},Y={};function X(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}H&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var G=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],me=H&&"CompositionEvent"in window,ve=null;H&&"documentMode"in document&&(ve=document.documentMode);var ye=H&&"TextEvent"in window&&!ve,ge=H&&(!me||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function ke(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var Se={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else Te?ke(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(Te||o!==we.compositionStart?o===we.compositionEnd&&Te&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Te=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),V(o),i=o):i=null,(e=ye?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(Te)return"compositionend"===e||!me&&ke(e,t)?(e=ie(),oe=re=ne=null,Te=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(we.beforeInput,t,n,r)).data=e,V(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,Pe=null,_e=null;function Oe(e){if(e=k(e)){"function"!=typeof Ce&&a("280");var t=x(e.stateNode);Ce(e.stateNode,e.type,t)}}function Ne(e){Pe?_e?_e.push(e):_e=[e]:Pe=e}function Re(){if(Pe){var e=Pe,t=_e;if(_e=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function je(e,t){return e(t)}function Ae(e,t,n){return e(t,n)}function Me(){}var Ue=!1;function Ie(e,t){if(Ue)return e(t);Ue=!0;try{return je(e,t)}finally{Ue=!1,(null!==Pe||null!==_e)&&(Me(),Re())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!H)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Be(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ve=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ve.hasOwnProperty("ReactCurrentDispatcher")||(Ve.ReactCurrentDispatcher={current:null});var He=/^(.*)[\\\/]/,qe="function"==typeof Symbol&&Symbol.for,Qe=qe?Symbol.for("react.element"):60103,Ke=qe?Symbol.for("react.portal"):60106,Ye=qe?Symbol.for("react.fragment"):60107,Xe=qe?Symbol.for("react.strict_mode"):60108,Ge=qe?Symbol.for("react.profiler"):60114,Je=qe?Symbol.for("react.provider"):60109,Ze=qe?Symbol.for("react.context"):60110,et=qe?Symbol.for("react.concurrent_mode"):60111,tt=qe?Symbol.for("react.forward_ref"):60112,nt=qe?Symbol.for("react.suspense"):60113,rt=qe?Symbol.for("react.memo"):60115,ot=qe?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case Ke:return"Portal";case Ge:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(He,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function kt(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ct(e,t,n){return(e=le.getPooled(St.change,e,t,n)).type="change",Ne(n),V(e),e}var Pt=null,_t=null;function Ot(e){R(e)}function Nt(e){if($e(D(e)))return e}function Rt(e,t){if("change"===e)return t}var jt=!1;function At(){Pt&&(Pt.detachEvent("onpropertychange",Mt),_t=Pt=null)}function Mt(e){"value"===e.propertyName&&Nt(_t)&&Ie(Ot,e=Ct(_t,e,Fe(e)))}function Ut(e,t,n){"focus"===e?(At(),_t=n,(Pt=t).attachEvent("onpropertychange",Mt)):"blur"===e&&At()}function It(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(_t)}function Dt(e,t){if("click"===e)return Nt(t)}function Lt(e,t){if("input"===e||"change"===e)return Nt(t)}H&&(jt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:St,_isInputEventSupported:jt,extractEvents:function(e,t,n,r){var o=t?D(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Rt:Le(o)?jt?i=Lt:(i=It,a=Ut):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Dt),i&&(i=i(e,t)))return Ct(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Tt(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function $t(){return Bt}var Vt=0,Ht=0,qt=!1,Qt=!1,Kt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:$t,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,qt?"mousemove"===e.type?e.screenX-t:0:(qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,Qt?"mousemove"===e.type?e.screenY-t:0:(Qt=!0,0)}}),Yt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Gt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?U(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,u=Xt.mouseLeave,l=Xt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,u=Xt.pointerLeave,l=Xt.pointerEnter,c="pointer");var s=null==i?o:D(i);if(o=null==t?o:D(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=F(a))c++;for(a=0,l=o;l;l=F(l))a++;for(;0<c-a;)t=F(t),c--;for(;0<a-c;)o=F(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=F(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=F(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=i.length;0<r--;)B(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:$t,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:$t}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[G,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var wn={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case G:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=le}return V(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,kn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=U(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<y.length;u++){var l=y[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=S(a,l))}R(a)}}var Tn=!0;function Sn(e,t){if(!t)return null;var n=(xn(e)?Pn:_n).bind(null,e);t.addEventListener(e,n,!1)}function Cn(e,t){if(!t)return null;var n=(xn(e)?Pn:_n).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Ae(_n,e,t)}function _n(e,t){if(Tn){var n=Fe(t);if(null===(n=U(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),kn.length){var r=kn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ie(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>kn.length&&kn.push(e)}}}var On={},Nn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function jn(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=Nn++,On[e[Rn]]={}),On[e[Rn]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Un(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function In(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=An((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ln(e){var t=In(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Un(n,i);var a=Un(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=H&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Bn=null,$n=null,Vn=!1;function Hn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==Wn||Wn!==An(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$n&&en($n,n)?null:($n=n,(e=le.getPooled(zn.select,Bn,e,t)).type="select",e.target=Wn,V(e),e))}var qn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=jn(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?D(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Wn=i,Bn=t,$n=null);break;case"blur":$n=Bn=Wn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Hn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Hn(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Gn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=L,k=I,E=D,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:Ft,SelectEventPlugin:qn,BeforeInputEventPlugin:Se});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function sr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Cn("scroll",e);break;case"focus":case"blur":Cn("focus",e),Cn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Cn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function dr(){}var hr=null,mr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0,wr=i.unstable_scheduleCallback,xr=i.unstable_cancelCallback;function kr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Tr=[],Sr=-1;function Cr(e){0>Sr||(e.current=Tr[Sr],Tr[Sr]=null,Sr--)}function Pr(e,t){Tr[++Sr]=e.current,e.current=t}var _r={},Or={current:_r},Nr={current:!1},Rr=_r;function jr(e,t){var n=e.type.contextTypes;if(!n)return _r;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Ar(e){return null!=(e=e.childContextTypes)}function Mr(e){Cr(Nr),Cr(Or)}function Ur(e){Cr(Nr),Cr(Or)}function Ir(e,t,n){Or.current!==_r&&a("168"),Pr(Or,t),Pr(Nr,n)}function Dr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Lr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||_r,Rr=Or.current,Pr(Or,t),Pr(Nr,Nr.current),!0}function Fr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Dr(e,t,Rr),r.__reactInternalMemoizedMergedChildContext=t,Cr(Nr),Cr(Or),Pr(Or,t)):Cr(Nr),Pr(Nr,n)}var zr=null,Wr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Vr(e,t,n,r){return new $r(e,t,n,r)}function Hr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qr(e,t){var n=e.alternate;return null===n?((n=Vr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Hr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ye:return Kr(n.children,o,i,t);case et:return Yr(n,3|o,i,t);case Xe:return Yr(n,2|o,i,t);case Ge:return(e=Vr(12,n,t,4|o)).elementType=Ge,e.type=Ge,e.expirationTime=i,e;case nt:return(e=Vr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Vr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Kr(e,t,n,r){return(e=Vr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=Vr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Vr(6,e,null,t)).expirationTime=n,e}function Gr(e,t,n){return(t=Vr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),to(t,e)}function Zr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),to(t,e)}function eo(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function to(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function no(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ro=(new r.Component).refs;function oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var io={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=xu(),o=Yi(r=Ka(r,e));o.payload=t,null!=n&&(o.callback=n),Ba(),Gi(e,o),Ga(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=xu(),o=Yi(r=Ka(r,e));o.tag=$i,o.payload=t,null!=n&&(o.callback=n),Ba(),Gi(e,o),Ga(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=xu(),r=Yi(n=Ka(n,e));r.tag=Vi,null!=t&&(r.callback=t),Ba(),Gi(e,r),Ga(e,n)}};function ao(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function uo(e,t,n){var r=!1,o=_r,i=t.contextType;return"object"==typeof i&&null!==i?i=Wi(i):(o=Ar(t)?Rr:Or.current,i=(r=null!=(r=t.contextTypes))?jr(e,o):_r),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=io,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&io.enqueueReplaceState(t,t.state,null)}function co(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ro;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Wi(i):(i=Ar(t)?Rr:Or.current,o.context=jr(e,i)),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var so=Array.isArray;function fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function po(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=fo(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=fo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Kr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=fo(e,null,t),n.return=e,n;case Ke:return(t=Gr(t,e.mode,n)).return=e,t}if(so(t)||at(t))return(t=Kr(t,e.mode,n,null)).return=e,t;po(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ke:return n.key===o?s(e,t,n,r):null}if(so(n)||at(n))return null!==o?null:f(e,t,n,r,null);po(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ke:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(so(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);po(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)(f=p(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=at(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,c);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=i(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ye&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Qe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ye:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ye?i.props.children:i.props)).ref=fo(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ye?((r=Kr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Qr(i.type,i.key,i.props,null,e.mode,l)).ref=fo(e,r,i),l.return=e,e=l)}return u(e);case Ke:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,l)).return=e,e=r),u(e);if(so(i))return m(e,r,i,l);if(at(i))return v(e,r,i,l);if(s&&po(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var mo=ho(!0),vo=ho(!1),yo={},go={current:yo},bo={current:yo},wo={current:yo};function xo(e){return e===yo&&a("174"),e}function ko(e,t){Pr(wo,t),Pr(bo,e),Pr(go,yo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Cr(go),Pr(go,t)}function Eo(e){Cr(go),Cr(bo),Cr(wo)}function To(e){xo(wo.current);var t=xo(go.current),n=tr(t,e.type);t!==n&&(Pr(bo,e),Pr(go,n))}function So(e){bo.current===e&&(Cr(go),Cr(bo))}var Co=0,Po=2,_o=4,Oo=8,No=16,Ro=32,jo=64,Ao=128,Mo=Ve.ReactCurrentDispatcher,Uo=0,Io=null,Do=null,Lo=null,Fo=null,zo=null,Wo=null,Bo=0,$o=null,Vo=0,Ho=!1,qo=null,Qo=0;function Ko(){a("321")}function Yo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Uo=i,Io=t,Lo=null!==e?e.memoizedState:null,Mo.current=null===Lo?ci:si,t=n(r,o),Ho){do{Ho=!1,Qo+=1,Lo=null!==e?e.memoizedState:null,Wo=Fo,$o=zo=Do=null,Mo.current=si,t=n(r,o)}while(Ho);qo=null,Qo=0}return Mo.current=li,(e=Io).memoizedState=Fo,e.expirationTime=Bo,e.updateQueue=$o,e.effectTag|=Vo,e=null!==Do&&null!==Do.next,Uo=0,Wo=zo=Fo=Lo=Do=Io=null,Bo=0,$o=null,Vo=0,e&&a("300"),t}function Go(){Mo.current=li,Uo=0,Wo=zo=Fo=Lo=Do=Io=null,Bo=0,$o=null,Vo=0,Ho=!1,qo=null,Qo=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===zo?Fo=zo=e:zo=zo.next=e,zo}function Zo(){if(null!==Wo)Wo=(zo=Wo).next,Lo=null!==(Do=Lo)?Do.next:null;else{null===Lo&&a("310");var e={memoizedState:(Do=Lo).memoizedState,baseState:Do.baseState,queue:Do.queue,baseUpdate:Do.baseUpdate,next:null};zo=null===zo?Fo=e:zo.next=e,Lo=Do.next}return zo}function ei(e,t){return"function"==typeof t?t(e):t}function ti(e){var t=Zo(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<Qo){var r=n.dispatch;if(null!==qo){var o=qo.get(n);if(void 0!==o){qo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Uo?(s||(s=!0,l=u,o=i),f>Bo&&(Bo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===$o?($o={lastEffect:null}).lastEffect=e.next=e:null===(t=$o.lastEffect)?$o.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,$o.lastEffect=e),e}function ri(e,t,n,r){var o=Jo();Vo|=e,o.memoizedState=ni(t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Zo();r=void 0===r?null:r;var i=void 0;if(null!==Do){var a=Do.memoizedState;if(i=a.destroy,null!==r&&Yo(r,a.deps))return void ni(Co,n,i,r)}Vo|=e,o.memoizedState=ni(t,n,i,r)}function ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function ui(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Io||null!==r&&r===Io)if(Ho=!0,e={expirationTime:Uo,action:n,eagerReducer:null,eagerState:null,next:null},null===qo&&(qo=new Map),void 0===(n=qo.get(t)))qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ba();var o=xu(),i={expirationTime:o=Ka(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Jt(s,c))return}catch(e){}Ga(e,o)}}var li={readContext:Wi,useCallback:Ko,useContext:Ko,useEffect:Ko,useImperativeHandle:Ko,useLayoutEffect:Ko,useMemo:Ko,useReducer:Ko,useRef:Ko,useState:Ko,useDebugValue:Ko},ci={readContext:Wi,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Wi,useEffect:function(e,t){return ri(516,Ao|jo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,_o|Ro,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,_o|Ro,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ui.bind(null,Io,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ei,lastRenderedState:e}).dispatch=ui.bind(null,Io,e),[t.memoizedState,e]},useDebugValue:ai},si={readContext:Wi,useCallback:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wi,useEffect:function(e,t){return oi(516,Ao|jo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,_o|Ro,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,_o|Ro,e,t)},useMemo:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ti,useRef:function(){return Zo().memoizedState},useState:function(e){return ti(ei)},useDebugValue:ai},fi=null,pi=null,di=!1;function hi(e,t){var n=Vr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vi(e){if(di){var t=pi;if(t){var n=t;if(!mi(e,t)){if(!(t=kr(n))||!mi(e,t))return e.effectTag|=2,di=!1,void(fi=e);hi(fi,n)}fi=e,pi=Er(t)}else e.effectTag|=2,di=!1,fi=e}}function yi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fi=e}function gi(e){if(e!==fi)return!1;if(!di)return yi(e),di=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=pi;t;)hi(e,t),t=kr(t);return yi(e),pi=fi?kr(e.stateNode):null,!0}function bi(){pi=fi=null,di=!1}var wi=Ve.ReactCurrentOwner,xi=!1;function ki(e,t,n,r){t.child=null===e?vo(t,null,n,r):mo(t,e.child,n,r)}function Ei(e,t,n,r,o){n=n.render;var i=t.ref;return zi(t,o),r=Xo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,ki(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),ji(e,t,o))}function Ti(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Hr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Si(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?ji(e,t,i):(t.effectTag|=1,(e=qr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Si(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(xi=!1,o<i)?ji(e,t,i):Pi(e,t,n,r,i)}function Ci(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Pi(e,t,n,r,o){var i=Ar(n)?Rr:Or.current;return i=jr(t,i),zi(t,o),n=Xo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,ki(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),ji(e,t,o))}function _i(e,t,n,r,o){if(Ar(n)){var i=!0;Lr(t)}else i=!1;if(zi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),uo(t,n,r),co(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Wi(c):c=jr(t,c=Ar(n)?Rr:Or.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&lo(t,a,r,c),qi=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(ta(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||Nr.current||qi?("function"==typeof s&&(oo(t,n,s,r),l=t.memoizedState),(u=qi||ao(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:no(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Wi(c):c=jr(t,c=Ar(n)?Rr:Or.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&lo(t,a,r,c),qi=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(ta(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||Nr.current||qi?("function"==typeof s&&(oo(t,n,s,r),p=t.memoizedState),(s=qi||ao(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Oi(e,t,n,r,i,o)}function Oi(e,t,n,r,o,i){Ci(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Fr(t,n,!1),ji(e,t,i);r=t.stateNode,wi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mo(t,e.child,null,i),t.child=mo(t,null,u,i)):ki(e,t,u,i),t.memoizedState=r.state,o&&Fr(t,n,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?Ir(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ir(0,t.context,!1),ko(e,t.containerInfo)}function Ri(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Kr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Kr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=vo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=qr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=qr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=mo(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Kr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Kr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=mo(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function ji(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ai(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)xi=!0;else if(r<n){switch(xi=!1,t.tag){case 3:Ni(t),bi();break;case 5:To(t);break;case 1:Ar(t.type)&&Lr(t);break;case 4:ko(t,t.stateNode.containerInfo);break;case 10:Li(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ri(e,t,n):null!==(t=ji(e,t,n))?t.sibling:null}return ji(e,t,n)}}else xi=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=jr(t,Or.current);if(zi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Go(),Ar(r)){var i=!0;Lr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&oo(t,r,u,e),o.updater=io,t.stateNode=o,o._reactInternalFiber=t,co(t,r,e,n),t=Oi(null,t,r,!0,i,n)}else t.tag=0,ki(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Hr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=no(e,i),u=void 0,o){case 0:u=Pi(null,t,e,i,n);break;case 1:u=_i(null,t,e,i,n);break;case 11:u=Ei(null,t,e,i,n);break;case 14:u=Ti(null,t,e,no(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:no(r,o),n);case 1:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:no(r,o),n);case 3:return Ni(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,ta(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(bi(),t=ji(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pi=Er(t.stateNode.containerInfo),fi=t,o=di=!0),o?(t.effectTag|=2,t.child=vo(t,null,r,n)):(ki(e,t,r,n),bi()),t=t.child),t;case 5:return To(t),null===e&&vi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,yr(r,o)?u=null:null!==i&&yr(r,i)&&(t.effectTag|=16),Ci(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ki(e,t,u,n),t=t.child),t;case 6:return null===e&&vi(t),null;case 13:return Ri(e,t,n);case 4:return ko(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mo(t,null,r,n):ki(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ei(e,t,r,o=t.elementType===r?o:no(r,o),n);case 7:return ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Li(t,i=o.value),null!==u){var l=u.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Nr.current){t=ji(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){u=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Yi(n)).tag=Vi,Gi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}ki(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,zi(t,n),r=r(o=Wi(o,i.unstable_observedBits)),t.effectTag|=1,ki(e,t,r,n),t.child;case 14:return i=no(o=t.type,t.pendingProps),Ti(e,t,o,i=no(o.type,i),r,n);case 15:return Si(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:no(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ar(r)?(e=!0,Lr(t)):e=!1,zi(t,n),uo(t,r,o),co(t,r,o,n),Oi(null,t,r,!0,e,n)}a("156")}var Mi={current:null},Ui=null,Ii=null,Di=null;function Li(e,t){var n=e.type._context;Pr(Mi,n._currentValue),n._currentValue=t}function Fi(e){var t=Mi.current;Cr(Mi),e.type._context._currentValue=t}function zi(e,t){Ui=e,Di=Ii=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(xi=!0),e.contextDependencies=null}function Wi(e,t){return Di!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Di=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ii?(null===Ui&&a("308"),Ii=t,Ui.contextDependencies={first:t,expirationTime:0}):Ii=Ii.next=t),e._currentValue}var Bi=0,$i=1,Vi=2,Hi=3,qi=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{expirationTime:e,tag:Bi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Gi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Ki(o):null===o&&(o=n.updateQueue=Ki(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Ji(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):Zi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Zi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ki(t)),t}function ea(e,t,n,r,i,a){switch(n.tag){case $i:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Hi:e.effectTag=-2049&e.effectTag|64;case Bi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case Vi:qi=!0}return r}function ta(e,t,n,r,o){qi=!1;for(var i=(t=Zi(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function na(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ra(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ra(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ra(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:lt(t)}}function ia(e){e.effectTag|=4}var aa=void 0,ua=void 0,la=void 0,ca=void 0;aa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ua=function(){},la=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(xo(go.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Qn(u,a),r=Qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Yn(u,a),r=Yn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=dr)}sr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&pr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&ia(t)}},ca=function(e,t,n,r){n!==r&&ia(t)};var sa="function"==typeof WeakSet?WeakSet:Set;function fa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function da(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Co){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Co&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ha(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:pa(e);break;case 4:ya(e)}}function ma(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ma(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ma(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=dr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ya(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(ha(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ga(e,t){switch(t.tag){case 0:case 11:case 14:case 15:da(_o,Oo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[M]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),fr(n,r),r=fr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?lr(e,u):"dangerouslySetInnerHTML"===a?rr(e,u):"children"===a?or(e,u):yt(e,a,u,r)}switch(n){case"input":kt(e,o);break;case"textarea":Gn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=xu())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ur("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new sa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ka(t=xu(),e),null!==(e=Xa(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&ku(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var ba="function"==typeof WeakMap?WeakMap:Map;function wa(e,t,n){(n=Yi(n)).tag=Hi,n.payload={element:null};var r=t.value;return n.callback=function(){Ru(r),fa(e,t)},n}function xa(e,t,n){(n=Yi(n)).tag=Hi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Da?Da=new Set([this]):Da.add(this));var n=t.value,o=t.stack;fa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function ka(e){switch(e.tag){case 1:Ar(e.type)&&Mr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Ur(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return So(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eo(),null;case 10:return Fi(e),null;default:return null}}var Ea=Ve.ReactCurrentDispatcher,Ta=Ve.ReactCurrentOwner,Sa=1073741822,Ca=!1,Pa=null,_a=null,Oa=0,Na=-1,Ra=!1,ja=null,Aa=!1,Ma=null,Ua=null,Ia=null,Da=null;function La(){if(null!==Pa)for(var e=Pa.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Mr();break;case 3:Eo(),Ur();break;case 5:So(t);break;case 4:Eo();break;case 10:Fi(t)}e=e.return}_a=null,Oa=0,Na=-1,Ra=!1,Pa=null}function Fa(){for(;null!==ja;){var e=ja.effectTag;if(16&e&&or(ja.stateNode,""),128&e){var t=ja.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(ja),ja.effectTag&=-3;break;case 6:va(ja),ja.effectTag&=-3,ga(ja.alternate,ja);break;case 4:ga(ja.alternate,ja);break;case 8:ya(e=ja),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}ja=ja.nextEffect}}function za(){for(;null!==ja;){if(256&ja.effectTag)e:{var e=ja.alternate,t=ja;switch(t.tag){case 0:case 11:case 15:da(Po,Co,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:no(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}ja=ja.nextEffect}}function Wa(e,t){for(;null!==ja;){var n=ja.effectTag;if(36&n){var r=ja.alternate,o=ja,i=t;switch(o.tag){case 0:case 11:case 15:da(No,Ro,o);break;case 1:var u=o.stateNode;if(4&o.effectTag)if(null===r)u.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:no(o.type,r.memoizedProps);u.componentDidUpdate(l,r.memoizedState,u.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&na(0,r,u);break;case 3:if(null!==(r=o.updateQueue)){if(u=null,null!==o.child)switch(o.child.tag){case 5:u=o.child.stateNode;break;case 1:u=o.child.stateNode}na(0,r,u)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&vr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=ja.ref)&&(i=ja.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Ma=e),ja=ja.nextEffect}}function Ba(){null!==Ua&&xr(Ua),null!==Ia&&Ia()}function $a(e,t){Aa=Ca=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Jr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,t)):t>n&&Jr(e,t)}to(0,e)}(e,o>r?o:r),Ta.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Tn,mr=function(){var e=In();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Tn=!1,ja=r;null!==ja;){o=!1;var u=void 0;try{za()}catch(e){o=!0,u=e}o&&(null===ja&&a("178"),Qa(ja,u),null!==ja&&(ja=ja.nextEffect))}for(ja=r;null!==ja;){o=!1,u=void 0;try{Fa()}catch(e){o=!0,u=e}o&&(null===ja&&a("178"),Qa(ja,u),null!==ja&&(ja=ja.nextEffect))}for(Ln(mr),mr=null,Tn=!!hr,hr=null,e.current=t,ja=r;null!==ja;){o=!1,u=void 0;try{Wa(e,n)}catch(e){o=!0,u=e}o&&(null===ja&&a("178"),Qa(ja,u),null!==ja&&(ja=ja.nextEffect))}if(null!==r&&null!==Ma){var l=function(e,t){Ia=Ua=Ma=null;var n=ru;ru=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;da(Ao,Co,i),da(Co,jo,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);ru=n,0!==(n=e.expirationTime)&&ku(e,n),cu||ru||Pu(1073741823,!1)}.bind(null,e,r);Ua=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return wr(l)}),Ia=l}Ca=Aa=!1,"function"==typeof zr&&zr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Da=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Va(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Pa=e;e:{var i=t,u=Oa,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ar(t.type)&&Mr();break;case 3:Eo(),Ur(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(gi(t),t.effectTag&=-3),ua(t);break;case 5:So(t);var c=xo(wo.current);if(u=t.type,null!==i&&null!=t.stateNode)la(i,t,u,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=xo(go.current);if(gi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[A]=l,i[M]=p,u=void 0,c=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":wt(i,p),Sn("invalid",i),pr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),pr(d,"onChange");break;case"textarea":Xn(i,p),Sn("invalid",i),pr(d,"onChange")}for(u in sr(c,p),f=null,p)p.hasOwnProperty(u)&&(s=p[u],"children"===u?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(u)&&null!=s&&pr(d,u));switch(c){case"input":Be(i),Et(i,p,!0);break;case"textarea":Be(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=dr)}u=f,l.updateQueue=u,(l=null!==u)&&ia(t)}else{p=t,d=u,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(d)),s===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(s,d),(i=f)[A]=p,i[M]=l,aa(i,t,!1,!1),d=i;var h=c,m=fr(f=u,p=l);switch(f){case"iframe":case"object":Sn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)Sn(te[c],d);c=p;break;case"source":Sn("error",d),c=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),c=p;break;case"form":Sn("reset",d),Sn("submit",d),c=p;break;case"details":Sn("toggle",d),c=p;break;case"input":wt(d,p),c=bt(d,p),Sn("invalid",d),pr(h,"onChange");break;case"option":c=Qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),Sn("invalid",d),pr(h,"onChange");break;case"textarea":Xn(d,p),c=Yn(d,p),Sn("invalid",d),pr(h,"onChange");break;default:c=p}sr(f,c),s=void 0;var v=f,y=d,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?lr(y,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&rr(y,w):"children"===s?"string"==typeof w?("textarea"!==v||""!==w)&&or(y,w):"number"==typeof w&&or(y,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&pr(h,s):null!=w&&yt(y,s,w,m))}switch(f){case"input":Be(d),Et(d,p,!1);break;case"textarea":Be(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+gt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?Kn(c,!!p.multiple,d,!1):null!=p.defaultValue&&Kn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=dr)}(l=vr(u,l))&&ia(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?ca(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=xo(wo.current),xo(go.current),gi(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[A]=l,(l=u.nodeValue!==i)&&ia(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[A]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Pa=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo(),ua(t);break;case 10:Fi(t);break;case 9:case 14:break;case 17:Ar(t.type)&&Mr();break;case 18:break;default:a("156")}Pa=null}if(t=e,1===Oa||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(c=u.childExpirationTime)>l&&(l=c),u=u.sibling;t.childExpirationTime=l}if(null!==Pa)return Pa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ka(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ha(e){var t=Ai(e.alternate,e,Oa);return e.memoizedProps=e.pendingProps,null===t&&(t=Va(e)),Ta.current=null,t}function qa(e,t){Ca&&a("243"),Ba(),Ca=!0;var n=Ea.current;Ea.current=li;var r=e.nextExpirationTimeToWorkOn;r===Oa&&e===_a&&null!==Pa||(La(),Oa=r,Pa=qr((_a=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Pa&&!Su();)Pa=Ha(Pa);else for(;null!==Pa;)Pa=Ha(Pa)}catch(t){if(Di=Ii=Ui=null,Go(),null===Pa)o=!0,Ru(t);else{null===Pa&&a("271");var i=Pa,u=i.return;if(null!==u){e:{var l=e,c=u,s=i,f=t;if(u=Oa,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?d=0:(-1===d||m<d)&&(d=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((u=Yi(1073741823)).tag=Vi,Gi(s,u))),s.expirationTime=1073741823;break e}c=u;var v=(s=l).pingCache;null===v?(v=s.pingCache=new ba,m=new Set,v.set(p,m)):void 0===(m=v.get(p))&&(m=new Set,v.set(p,m)),m.has(c)||(m.add(c),s=Ya.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-eo(l,u))-5e3),l=h+d),0<=l&&Na<l&&(Na=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Ra=!0,f=oa(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Ji(l,u=wa(l,f,u));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Da||!Da.has(s)))){l.effectTag|=2048,l.expirationTime=u,Ji(l,u=xa(l,d,u));break e}}l=l.return}while(null!==l)}Pa=Va(i);continue}o=!0,Ru(t)}}break}if(Ca=!1,Ea.current=n,Di=Ii=Ui=null,Go(),o)_a=null,e.finishedWork=null;else if(null!==Pa)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),_a=null,Ra){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==u&&u<r)return Zr(e,r),void wu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wu(e,n,r,t,-1)}t&&-1!==Na?(Zr(e,r),(t=10*(1073741822-eo(e,r)))<Na&&(Na=t),t=10*(1073741822-xu()),t=Na-t,wu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Da||!Da.has(r)))return Gi(n,e=xa(n,e=oa(t,e),1073741823)),void Ga(n,1073741823);break;case 3:return Gi(n,e=wa(n,e=oa(t,e),1073741823)),void Ga(n,1073741823)}n=n.return}3===e.tag&&(Gi(e,n=wa(e,n=oa(t,e),1073741823)),Ga(e,1073741823))}function Ka(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ca&&!Aa)r=Oa;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==_a&&r===Oa&&--r}return n===i.unstable_UserBlockingPriority&&(0===au||r<au)&&(au=r),r}function Ya(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==_a&&Oa===n?_a=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),to(n,e),0!==(n=e.expirationTime)&&ku(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ga(e,t){null!==(e=Xa(e,t))&&(!Ca&&0!==Oa&&t>Oa&&La(),Jr(e,t),Ca&&!Aa&&_a===e||ku(e,e.expirationTime),vu>mu&&(vu=0,a("185")))}function Ja(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var Za=null,eu=null,tu=0,nu=void 0,ru=!1,ou=null,iu=0,au=0,uu=!1,lu=null,cu=!1,su=!1,fu=null,pu=i.unstable_now(),du=1073741822-(pu/10|0),hu=du,mu=50,vu=0,yu=null;function gu(){du=1073741822-((i.unstable_now()-pu)/10|0)}function bu(e,t){if(0!==tu){if(t<tu)return;null!==nu&&i.unstable_cancelCallback(nu)}tu=t,e=i.unstable_now()-pu,nu=i.unstable_scheduleCallback(Cu,{timeout:10*(1073741822-t)-e})}function wu(e,t,n,r,o){e.expirationTime=r,0!==o||Su()?0<o&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,gu(),hu=du,_u(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function xu(){return ru?hu:(Eu(),0!==iu&&1!==iu||(gu(),hu=du),hu)}function ku(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===eu?(Za=eu=e,e.nextScheduledRoot=e):(eu=eu.nextScheduledRoot=e).nextScheduledRoot=Za):t>e.expirationTime&&(e.expirationTime=t),ru||(cu?su&&(ou=e,iu=1073741823,Ou(e,1073741823,!1)):1073741823===t?Pu(1073741823,!1):bu(e,t))}function Eu(){var e=0,t=null;if(null!==eu)for(var n=eu,r=Za;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===eu)&&a("244"),r===r.nextScheduledRoot){Za=eu=r.nextScheduledRoot=null;break}if(r===Za)Za=o=r.nextScheduledRoot,eu.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===eu){(eu=n).nextScheduledRoot=Za,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===eu)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ou=t,iu=e}var Tu=!1;function Su(){return!!Tu||!!i.unstable_shouldYield()&&(Tu=!0)}function Cu(){try{if(!Su()&&null!==Za){gu();var e=Za;do{var t=e.expirationTime;0!==t&&du<=t&&(e.nextExpirationTimeToWorkOn=du),e=e.nextScheduledRoot}while(e!==Za)}Pu(0,!0)}finally{Tu=!1}}function Pu(e,t){if(Eu(),t)for(gu(),hu=du;null!==ou&&0!==iu&&e<=iu&&!(Tu&&du>iu);)Ou(ou,iu,du>iu),Eu(),gu(),hu=du;else for(;null!==ou&&0!==iu&&e<=iu;)Ou(ou,iu,!1),Eu();if(t&&(tu=0,nu=null),0!==iu&&bu(ou,iu),vu=0,yu=null,null!==fu)for(e=fu,fu=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){uu||(uu=!0,lu=e)}}if(uu)throw e=lu,lu=null,uu=!1,e}function _u(e,t){ru&&a("253"),ou=e,iu=t,Ou(e,t,!1),Pu(1073741823,!1)}function Ou(e,t,n){if(ru&&a("245"),ru=!0,n){var r=e.finishedWork;null!==r?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),qa(e,n),null!==(r=e.finishedWork)&&(Su()?e.finishedWork=r:Nu(e,r,t)))}else null!==(r=e.finishedWork)?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),qa(e,n),null!==(r=e.finishedWork)&&Nu(e,r,t));ru=!1}function Nu(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===fu?fu=[r]:fu.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===yu?vu++:(yu=e,vu=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){$a(e,t)})}function Ru(e){null===ou&&a("246"),ou.expirationTime=0,uu||(uu=!0,lu=e)}function ju(e,t){var n=cu;cu=!0;try{return e(t)}finally{(cu=n)||ru||Pu(1073741823,!1)}}function Au(e,t){if(cu&&!su){su=!0;try{return e(t)}finally{su=!1}}return e(t)}function Mu(e,t,n){cu||ru||0===au||(Pu(au,!1),au=0);var r=cu;cu=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cu=r)||ru||Pu(1073741823,!1)}}function Uu(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Ar(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(Ar(l)){n=Dr(n,l,u);break e}}n=u}else n=_r;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Yi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ba(),Gi(i,o),Ga(i,r),r}function Iu(e,t,n,r){var o=t.current;return Uu(e,t,n,o=Ka(xu(),o),r)}function Du(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Lu(e){var t=1073741822-25*(1+((1073741822-xu()+500)/25|0));t>=Sa&&(t=Sa-1),this._expirationTime=Sa=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Fu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function zu(e,t,n){e={current:t=Vr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Wu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Du(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Du(i._internalRoot);u.call(e)}}Au(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Du(i._internalRoot)}function $u(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Wu(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ce=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);o||a("90"),$e(r),kt(r,o)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Lu.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Fu;return Uu(e,t,null,n,r._onCommit),r},Lu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Lu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,_u(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Lu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Fu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},zu.prototype.render=function(e,t){var n=this._internalRoot,r=new Fu;return null!==(t=void 0===t?null:t)&&r.then(t),Iu(e,n,null,r._onCommit),r},zu.prototype.unmount=function(e){var t=this._internalRoot,n=new Fu;return null!==(e=void 0===e?null:e)&&n.then(e),Iu(null,t,null,n._onCommit),n},zu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Fu;return null!==(n=void 0===n?null:n)&&o.then(n),Iu(t,r,e,o._onCommit),o},zu.prototype.createBatch=function(){var e=new Lu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},je=ju,Ae=Mu,Me=function(){ru||0===au||(Pu(au,!1),au=0)};var Vu,Hu,qu={createPortal:$u,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Wu(t)||a("200"),Bu(null,e,t,!0,n)},render:function(e,t,n){return Wu(t)||a("200"),Bu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Wu(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Bu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Wu(e)||a("40"),!!e._reactRootContainer&&(Au(function(){Bu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $u.apply(void 0,arguments)},unstable_batchedUpdates:ju,unstable_interactiveUpdates:Mu,flushSync:function(e,t){ru&&a("187");var n=cu;cu=!0;try{return Ja(e,t)}finally{cu=n,Pu(1073741823,!1)}},unstable_createRoot:function(e,t){return Wu(e)||a("299","unstable_createRoot"),new zu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cu;cu=!0;try{Ja(e)}finally{(cu=t)||ru||Pu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,D,L,O.injectEventPluginsByName,g,V,function(e){C(e,$)},Ne,Re,_n,R]}};Hu=(Vu={findFiberByHostInstance:U,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);zr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Wr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}}(o({},Vu,{overrideProps:null,currentDispatcherRef:Ve.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Hu?Hu(e):null}}));var Qu={default:qu},Ku=Qu&&qu||Qu;e.exports=Ku.default||Ku},function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?E():l=!0,k(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function p(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!T())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var d,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){d=g(function(t){y(h),e(t)}),h=v(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var k,E,T,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var C=S._schedMock;k=C[0],E=C[1],T=C[2],t.unstable_now=C[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,_=function(e){if(null!==P)try{P(e)}finally{P=null}};k=function(e){null!==P?setTimeout(k,0,e):(P=e,setTimeout(_,0,!1))},E=function(){P=null},T=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,R=-1,j=!1,A=!1,M=0,U=33,I=33;T=function(){return M<=t.unstable_now()};var D=new MessageChannel,L=D.port2;D.port1.onmessage=function(){N=!1;var e=O,n=R;O=null,R=-1;var r=t.unstable_now(),o=!1;if(0>=M-r){if(!(-1!==n&&n<=r))return j||(j=!0,w(F)),O=e,void(R=n);o=!0}if(null!==e){A=!0;try{e(o)}finally{A=!1}}};var F=function(e){if(null!==O){w(F);var t=e-M+I;t<I&&U<I?(8>t&&(t=8),I=t<U?U:t):U=t,M=e+I,N||(N=!0,L.postMessage(void 0))}else j=!1};k=function(e,t){O=e,R=t,A||0>t?L.postMessage(void 0):j||(j=!0,w(F))},E=function(){O=null,N=!1,R=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||T())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(15))},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=n(39);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case v:case m:case i:return t}}}function g(e){return y(e)===p}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===u||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return g(e)||y(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return y(e)===s},t.isContextProvider=function(e){return y(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return y(e)===d},t.isFragment=function(e){return y(e)===a},t.isLazy=function(e){return y(e)===v},t.isMemo=function(e){return y(e)===m},t.isPortal=function(e){return y(e)===i},t.isProfiler=function(e){return y(e)===l},t.isStrictMode=function(e){return y(e)===u},t.isSuspense=function(e){return y(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(2),o=n(20),i=n(44),a=n(26);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(n(23));l.Axios=i,l.create=function(e){return u(a(l.defaults,e))},l.Cancel=n(27),l.CancelToken=n(57),l.isCancel=n(22),l.all=function(e){return Promise.all(e)},l.spread=n(58),e.exports=l,e.exports.default=l},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(2),o=n(21),i=n(45),a=n(46),u=n(26);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}}),r.forEach(["post","put","patch"],function(e){l.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}}),e.exports=l},function(e,t,n){"use strict";var r=n(2);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(2),o=n(47),i=n(22),a=n(23),u=n(55),l=n(56);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],s=!1,f=-1;function p(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&d())}function d(){if(!s){var e=u(p);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(2);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(2),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(2);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(2);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(27);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)},function(e,t,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],i(n),i(r))}function a(e){try{return decodeURIComponent(e)}catch(o){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=i(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=o.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=a(n[0]);r!==n[0]&&(t[n[0]]=r)}n=o.exec(e)}t["%C2"]="�";for(var i=Object.keys(t),u=0;u<i.length;u++){var l=i[u];e=e.replace(new RegExp(l,"g"),t[l])}return e}(e)}}},function(e,t,n){"use strict";e.exports=(e,t)=>{if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Expected the arguments to be of type `string`");if(""===t)return[e];const n=e.indexOf(t);return-1===n?[e]:[e.slice(0,n),e.slice(n+t.length)]}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(12),a=n.n(i),u=n(3),l=n.n(u),c=n(4),s=n.n(c),f=n(5),p=n.n(f),d=n(6),h=n.n(d),m=n(7),v=n.n(m);function y(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var g=n(17),b=n.n(g),w=n(1),x=n.n(w),k=n(31),E=n.n(k),T=1073741823;var S=o.a.createContext||function(e,t){var n,o,i="__create-react-context-"+E()()+"__",a=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter(function(t){return t!==e})},get:function(){return n},set:function(e,t){n=e,r.forEach(function(e){return e(n,t)})}}),t}b()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):T,0!=(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);a.childContextTypes=((n={})[i]=x.a.object.isRequired,n);var u=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}b()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?T:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?T:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return u.contextTypes=((o={})[i]=x.a.object,o),{Provider:a,Consumer:u}};function C(){return(C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function P(e){return"/"===e.charAt(0)}function _(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var O=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&P(e),i=t&&P(t),a=o||i;if(e&&P(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var c=0,s=r.length;s>=0;s--){var f=r[s];"."===f?_(r,s):".."===f?(_(r,s),c++):c&&(_(r,s),c--)}if(!a)for(;c--;c)r.unshift("..");!a||""===r[0]||r[0]&&P(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var R=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":N(t);if(r!==(void 0===n?"undefined":N(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var a=Object.keys(t),u=Object.keys(n);return a.length===u.length&&a.every(function(r){return e(t[r],n[r])})}return!1},j=!0,A="Invariant failed";var M=function(e,t){if(!e)throw j?new Error(A):new Error(A+": "+(t||""))};function U(e){return"/"===e.charAt(0)?e:"/"+e}function I(e){return"/"===e.charAt(0)?e.substr(1):e}function D(e,t){return function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)}(e,t)?e.substr(t.length):e}function L(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function F(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function z(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=C({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=O(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function W(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&R(e.state,t.state)}function B(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}var $=!("undefined"==typeof window||!window.document||!window.document.createElement);function V(e,t){t(window.confirm(e))}var H="popstate",q="hashchange";function Q(){try{return window.history.state||{}}catch(e){return{}}}function K(e){void 0===e&&(e={}),$||M(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,u=void 0!==a&&a,l=i.getUserConfirmation,c=void 0===l?V:l,s=i.keyLength,f=void 0===s?6:s,p=e.basename?L(U(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=D(i,p)),z(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=B();function v(e){C(O,e),O.length=n.length,m.notifyListeners(O.location,O.action)}function y(e){(function(e){void 0===e.state&&navigator.userAgent.indexOf("CriOS")})(e)||w(d(e.state))}function g(){w(d(Q()))}var b=!1;function w(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",c,function(t){t?v({action:"POP",location:e}):function(e){var t=O.location,n=k.indexOf(t.key);-1===n&&(n=0);var r=k.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,T(o))}(e)})}}var x=d(Q()),k=[x.key];function E(e){return p+F(e)}function T(e){n.go(e)}var S=0;function P(e){1===(S+=e)&&1===e?(window.addEventListener(H,y),o&&window.addEventListener(q,g)):0===S&&(window.removeEventListener(H,y),o&&window.removeEventListener(q,g))}var _=!1;var O={length:n.length,action:"POP",location:x,createHref:E,push:function(e,t){var o=z(e,t,h(),O.location);m.confirmTransitionTo(o,"PUSH",c,function(e){if(e){var t=E(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var l=k.indexOf(O.location.key),c=k.slice(0,-1===l?0:l+1);c.push(o.key),k=c,v({action:"PUSH",location:o})}else window.location.href=t}})},replace:function(e,t){var o=z(e,t,h(),O.location);m.confirmTransitionTo(o,"REPLACE",c,function(e){if(e){var t=E(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var l=k.indexOf(O.location.key);-1!==l&&(k[l]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}})},go:T,goBack:function(){T(-1)},goForward:function(){T(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return _||(P(1),_=!0),function(){return _&&(_=!1,P(-1)),t()}},listen:function(e){var t=m.appendListener(e);return P(1),function(){P(-1),t()}}};return O}var Y="hashchange",X={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+I(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:I,decodePath:U},slash:{encodePath:U,decodePath:U}};function G(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function J(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)}function Z(e){void 0===e&&(e={}),$||M(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?V:r,i=n.hashType,a=void 0===i?"slash":i,u=e.basename?L(U(e.basename)):"",l=X[a],c=l.encodePath,s=l.decodePath;function f(){var e=s(G());return u&&(e=D(e,u)),z(e)}var p=B();function d(e){C(S,e),S.length=t.length,p.notifyListeners(S.location,S.action)}var h=!1,m=null;function v(){var e=G(),t=c(e);if(e!==t)J(t);else{var n=f(),r=S.location;if(!h&&W(r,n))return;if(m===F(n))return;m=null,function(e){if(h)h=!1,d();else{p.confirmTransitionTo(e,"POP",o,function(t){t?d({action:"POP",location:e}):function(e){var t=S.location,n=w.lastIndexOf(F(t));-1===n&&(n=0);var r=w.lastIndexOf(F(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,x(o))}(e)})}}(n)}}var y=G(),g=c(y);y!==g&&J(g);var b=f(),w=[F(b)];function x(e){t.go(e)}var k=0;function E(e){1===(k+=e)&&1===e?window.addEventListener(Y,v):0===k&&window.removeEventListener(Y,v)}var T=!1;var S={length:t.length,action:"POP",location:b,createHref:function(e){return"#"+c(u+F(e))},push:function(e,t){var n=z(e,void 0,void 0,S.location);p.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=F(n),r=c(u+t);if(G()!==r){m=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(F(S.location)),i=w.slice(0,-1===o?0:o+1);i.push(t),w=i,d({action:"PUSH",location:n})}else d()}})},replace:function(e,t){var n=z(e,void 0,void 0,S.location);p.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=F(n),r=c(u+t);G()!==r&&(m=t,J(r));var o=w.indexOf(F(S.location));-1!==o&&(w[o]=t),d({action:"REPLACE",location:n})}})},go:x,goBack:function(){x(-1)},goForward:function(){x(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return T||(E(1),T=!0),function(){return T&&(T=!1,E(-1)),t()}},listen:function(e){var t=p.appendListener(e);return E(1),function(){E(-1),t()}}};return S}function ee(e,t,n){return Math.min(Math.max(e,t),n)}var te=n(18),ne=n.n(te),re=n(13);function oe(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var ie=n(11),ae=n.n(ie),ue=function(e){var t=S();return t.displayName=e,t}("Router"),le=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}y(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(ue.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);o.a.Component;o.a.Component;var ce={},se=1e4,fe=0;function pe(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce(function(t,n){if(!n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ce[n]||(ce[n]={});if(r[e])return r[e];var o=[],i={regexp:ne()(e,o,t),keys:o};return fe<se&&(r[e]=i,fe++),i}(n,{end:i,strict:u,sensitive:c}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),p=e===s;return i&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:a.reduce(function(e,t,n){return e[t.name]=f[n],e},{})}},null)}var de=function(e){function t(){return e.apply(this,arguments)||this}return y(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(ue.Consumer,null,function(t){t||M(!1);var n=e.props.location||t.location,r=C({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?pe(n.pathname,e.props):t.match}),i=e.props,a=i.children,u=i.component,l=i.render;(Array.isArray(a)&&0===a.length&&(a=null),"function"==typeof a)&&(void 0===(a=a(r))&&(a=null));return o.a.createElement(ue.Provider,{value:r},a&&!function(e){return 0===o.a.Children.count(e)}(a)?a:r.match?u?o.a.createElement(u,r):l?l(r):null:null)})},t}(o.a.Component);function he(e){return"/"===e.charAt(0)?e:"/"+e}function me(e,t){if(!e)return t;var n=he(e);return 0!==t.pathname.indexOf(n)?t:C({},t,{pathname:t.pathname.substr(n.length)})}function ve(e){return"string"==typeof e?e:F(e)}function ye(e){return function(){M(!1)}}function ge(){}o.a.Component;var be=function(e){function t(){return e.apply(this,arguments)||this}return y(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(ue.Consumer,null,function(t){t||M(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?pe(i.pathname,C({},e.props,{path:a})):t.match}}),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null})},t}(o.a.Component);var we=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=K(t.props),t}return y(t,e),t.prototype.render=function(){return o.a.createElement(le,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;o.a.Component;var xe=o.a.createContext(null);var ke=function(e){e()},Ee=function(){return ke},Te=null,Se={notify:function(){}};var Ce=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=Se,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=Ee(),t=[],n=[],{clear:function(){n=Te,t=Te},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==Te&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Se)},e}(),Pe=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new Ce(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new Ce(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},n.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},n.render=function(){var e=this.props.context||xe;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(r.Component);Pe.propTypes={store:x.a.shape({subscribe:x.a.func.isRequired,dispatch:x.a.func.isRequired,getState:x.a.func.isRequired}),context:x.a.object,children:x.a.any};var _e=Pe,Oe=n(8),Ne=n.n(Oe),Re=[],je=[null,null];function Ae(e,t){var n=e[1];return[t.payload,n+1]}var Me=function(){return[null,0]},Ue="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function Ie(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,u=n.methodName,l=void 0===u?"connectAdvanced":u,c=n.renderCountProp,s=void 0===c?void 0:c,f=n.shouldHandleStateChanges,p=void 0===f||f,d=n.storeKey,h=void 0===d?"store":d,m=n.withRef,v=void 0!==m&&m,y=n.forwardRef,g=void 0!==y&&y,b=n.context,w=void 0===b?xe:b,x=oe(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);Ne()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),Ne()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");Ne()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var k=w;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=C({},x,{getDisplayName:a,methodName:l,renderCountProp:s,shouldHandleStateChanges:p,storeKey:h,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=x.pure;var f=c?r.useMemo:function(e){return e()};function d(n){var a=Object(r.useMemo)(function(){var e=n.forwardedRef,t=oe(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=a[0],c=a[1],s=a[2],d=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(re.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:k},[l,k]),h=Object(r.useContext)(d),m=Boolean(n.store),v=Boolean(h)&&Boolean(h.store);Ne()(m||v,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var y=n.store||h.store,g=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,u)}(y)},[y]),b=Object(r.useMemo)(function(){if(!p)return je;var e=new Ce(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[y,m,h]),w=b[0],x=b[1],E=Object(r.useMemo)(function(){return m?h:C({},h,{subscription:w})},[m,h,w]),T=Object(r.useReducer)(Ae,Re,Me),S=T[0][0],P=T[1];if(S&&S.error)throw S.error;var _=Object(r.useRef)(),O=Object(r.useRef)(s),N=Object(r.useRef)(),R=Object(r.useRef)(!1),j=f(function(){return N.current&&s===O.current?N.current:g(y.getState(),s)},[y,S,s]);Ue(function(){O.current=s,_.current=j,R.current=!1,N.current&&(N.current=null,x())}),Ue(function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,O.current)}catch(e){r=e,t=e}r||(t=null),n===_.current?R.current||x():(_.current=n,N.current=n,R.current=!0,P({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};w.onStateChange=n,w.trySubscribe(),n();return function(){if(e=!0,w.tryUnsubscribe(),t)throw t}}},[y,w,g]);var A=Object(r.useMemo)(function(){return o.a.createElement(t,C({},j,{ref:c}))},[c,t,j]);return Object(r.useMemo)(function(){return p?o.a.createElement(d.Provider,{value:E},A):A},[d,A,E])}var m=c?o.a.memo(d):d;if(m.WrappedComponent=t,m.displayName=i,g){var v=o.a.forwardRef(function(e,t){return o.a.createElement(m,C({},e,{forwardedRef:t}))});return v.displayName=i,v.WrappedComponent=t,ae()(v,t)}return ae()(m,t)}}var De=Object.prototype.hasOwnProperty;function Le(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function Fe(e,t){if(Le(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!De.call(t,n[o])||!Le(e[n[o]],t[n[o]]))return!1;return!0}var ze=n(16),We=function(){return Math.random().toString(36).substring(7).split("").join(".")},Be={INIT:"@@redux/INIT"+We(),REPLACE:"@@redux/REPLACE"+We(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+We()}};function $e(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ve(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function He(e,t){return function(){return t(e.apply(this,arguments))}}function qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Qe(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qe(n,!0).forEach(function(t){qe(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qe(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Ye(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function Xe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return Ke({},n,{dispatch:r=Ye.apply(void 0,i)(n.dispatch)})}}}function Ge(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Je(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Ze(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Je(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Je(o),o=r(t,n)),o},r}}var et=[function(e){return"function"==typeof e?Ze(e):void 0},function(e){return e?void 0:Ge(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?Ge(function(t){return function(e,t){if("function"==typeof e)return He(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=He(o,t))}return n}(e,t)}):void 0}];var tt=[function(e){return"function"==typeof e?Ze(e):void 0},function(e){return e?void 0:Ge(function(){return{}})}];function nt(e,t,n){return C({},n,e,t)}var rt=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return nt}}];function ot(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function it(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!f(d,a),y=!s(o,i);return i=o,a=d,v&&y?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(h=e(i,a),m=!p(h,u),u=h,m&&(c=n(u,l,a)),c):c}return function(o,s){return d?h(o,s):(u=e(i=o,a=s),l=t(r,a),c=n(u,l,a),d=!0,c)}}function at(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=oe(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?it:ot)(a,u,l,e,i)}function ut(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function lt(e,t){return e===t}var ct,st,ft,pt,dt,ht,mt,vt,yt,gt,bt,wt,xt=(ft=(st=void 0===ct?{}:ct).connectHOC,pt=void 0===ft?Ie:ft,dt=st.mapStateToPropsFactories,ht=void 0===dt?tt:dt,mt=st.mapDispatchToPropsFactories,vt=void 0===mt?et:mt,yt=st.mergePropsFactories,gt=void 0===yt?rt:yt,bt=st.selectorFactory,wt=void 0===bt?at:bt,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,l=void 0===u?lt:u,c=o.areOwnPropsEqual,s=void 0===c?Fe:c,f=o.areStatePropsEqual,p=void 0===f?Fe:f,d=o.areMergedPropsEqual,h=void 0===d?Fe:d,m=oe(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=ut(e,ht,"mapStateToProps"),y=ut(t,vt,"mapDispatchToProps"),g=ut(n,gt,"mergeProps");return pt(wt,C({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:a,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:p,areMergedPropsEqual:h},m))});var kt;"undefined"!=typeof window?r.useLayoutEffect:r.useEffect;kt=i.unstable_batchedUpdates,ke=kt;var Et="GET_WELCOME",Tt=n(29),St=n.n(Tt).a.create({baseURL:"https://authors-heaven.herokuapp.com/"}),Ct=Et,Pt=function(){return function(e){return St.get("/").then(function(t){return e({type:Ct,payload:t.data})})}},_t=function(e){function t(){return l()(this,t),p()(this,h()(t).apply(this,arguments))}return v()(t,e),s()(t,[{key:"componentDidMount",value:function(){this.props.getWelcome()}},{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("p",null,"message loaded from redux:",this.props.data?this.props.data.message:""))}}]),t}(r.Component);_t.propTypes={getWelcome:x.a.func.isRequired};var Ot=xt(function(e){return{data:e.testRedux.data}},{getWelcome:Pt})(_t),Nt=function(e){function t(){return l()(this,t),p()(this,h()(t).apply(this,arguments))}return v()(t,e),s()(t,[{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("h1",null,"Authors Heaven"),o.a.createElement("p",null,"This is the home page of authors heaven v 1.0.0"),o.a.createElement(Ot,null))}}]),t}(r.Component),Rt=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("h1",null,"Authors Heaven"),o.a.createElement("h2",null,"404"),o.a.createElement("p",null,"The page you are searching for was not found"))},jt=n(30),At=n.n(jt),Mt=n(10),Ut=n.n(Mt),It=n(9),Dt=n.n(It),Lt=function(e){function t(){return l()(this,t),p()(this,h()(t).apply(this,arguments))}return v()(t,e),s()(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"or-separator"},o.a.createElement("b",null,"or"))}}]),t}(r.Component),Ft=function(e){function t(){var e,n;l()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=p()(this,(e=h()(t)).call.apply(e,[this].concat(o))),Dt()(Ut()(n),"facebookLink","https://authors-heaven.herokuapp.com/api/users/facebook"),Dt()(Ut()(n),"twitterLink","https://authors-heaven.herokuapp.com/api/users/twitter"),Dt()(Ut()(n),"googleLink","https://authors-heaven.herokuapp.com/api/users/google"),n}return v()(t,e),s()(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return o.a.createElement("div",{className:"social-btn text-center"},o.a.createElement(Lt,null),o.a.createElement("a",{href:this.facebookLink,className:"btn btn-primary btn-lg",title:"Facebook"},o.a.createElement("i",{className:"fab fa-facebook-f"})),o.a.createElement("a",{href:this.twitterLink,className:"btn btn-info btn-lg",title:"Twitter"},o.a.createElement("i",{className:"fab fa-twitter"})),o.a.createElement("a",{href:this.googleLink,className:"btn btn-danger btn-lg",title:"Google"},o.a.createElement("i",{className:"fab fa-google"})))}}]),t}(r.Component),zt=function(e){var t=At.a.parse(e.location.search).token;return console.log(">>>>>",t),o.a.createElement(o.a.Fragment,null,o.a.createElement("h1",null,"Authors Heaven/Login"),o.a.createElement("p",null,"Thi is the login page"),o.a.createElement(Ft,{token:t}))};function Wt(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Bt=Wt();function $t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$t(n,!0).forEach(function(t){Dt()(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$t(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}Bt.withExtraArgument=Wt;var Ht=Et,qt={data:{}},Qt=[Bt],Kt=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function p(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1)}}}function d(e){if(!$e(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=i(a,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:Be.INIT}),(o={dispatch:d,subscribe:p,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:Be.REPLACE})}})[ze.a]=function(){var e,t=p;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[ze.a]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:Be.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Be.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+Be.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var p=Ve(l,t);throw new Error(p)}o[l]=f,r=r||f!==s}return r?o:e}}({testRedux:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qt,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Ht:return Vt({},e,{data:t.payload.data});default:return e}}}),{},Ye(Xe.apply(void 0,Qt))),Yt=function(e){function t(){return l()(this,t),p()(this,h()(t).apply(this,arguments))}return v()(t,e),s()(t,[{key:"render",value:function(){return o.a.createElement(_e,{store:Kt},o.a.createElement(we,null,o.a.createElement(be,null,o.a.createElement(de,{exact:!0,path:"/",component:Nt}),o.a.createElement(de,{exact:!0,path:"/login",component:zt}),o.a.createElement(de,{exact:!0,path:"*",component:Rt}))))}}]),t}(r.Component);n(63);a.a.render(o.a.createElement(Yt,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5LXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmljdC11cmktZW5jb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3BsaXQtb24tZmlyc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9SZWR1eC9BY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbmZpZ3MvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlZHV4L0FjdGlvbnMvdGVzdFJlZHV4QWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwL0NvbXBvbmVudHMvVGVzdFJlZHV4LmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAvQ29tcG9uZW50cy9Ib21lL0hvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC9Db21wb25lbnRzL05vdEZvdW5kL05vdEZvdW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAvQ29tcG9uZW50cy9TZXBhcmF0b3Ivb3Jfc2VwYXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAvQ29tcG9uZW50cy9Tb2NpYWxMb2dpbi9zb2NpYWxMb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwL0NvbXBvbmVudHMvTG9naW4vTG9naW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9SZWR1eC9SZWR1Y2Vycy90ZXN0UmVkdXhSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9SZWR1eC9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVkdXgvUmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiYXJndW1lbnRzIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJSZWZlcmVuY2VFcnJvciIsIlJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsIiQkdHlwZW9mIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImdsb2JhbCIsInJvb3QiLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJjb21waWxlIiwib3B0aW9ucyIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwiam9pbiIsInJlcyIsInRva2VucyIsImluZGV4IiwicGF0aCIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsIm9mZnNldCIsInNsaWNlIiwibmV4dCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwdXNoIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwibWF0Y2hlcyIsIkFycmF5Iiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsInRlc3QiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJzb3VyY2UiLCJtYXRjaCIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImFwcGx5IiwidXRpbHMiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInYiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJpbmRleE9mIiwiX19DQU5DRUxfXyIsInByb2Nlc3MiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIkFjY2VwdCIsIm1ldGhvZCIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJ0aGVuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWcxIiwiY29uZmlnMiIsInByb3AiLCJDYW5jZWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwic3RyaWN0VXJpRW5jb2RlIiwiZGVjb2RlQ29tcG9uZW50Iiwic3BsaXRPbkZpcnN0IiwiZGVjb2RlIiwicmVtb3ZlSGFzaCIsImlucHV0IiwiaGFzaFN0YXJ0IiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJmb3JtYXR0ZXIiLCJhcnJheUZvcm1hdCIsImFjY3VtdWxhdG9yIiwibmV3VmFsdWUiLCJwYXJzZXJGb3JBcnJheUZvcm1hdCIsInNvcnQiLCJwYXJzZU51bWJlcnMiLCJwYXJzZUJvb2xlYW5zIiwicmV0IiwicGFyYW0iLCJOdW1iZXIiLCJpc05hTiIsInJlZHVjZSIsIkJvb2xlYW4iLCJrZXlzU29ydGVyIiwiZW5jb2RlckZvckFycmF5Rm9ybWF0IiwiZmlsdGVyIiwieCIsInBhcnNlVXJsIiwicXVlcnkiLCJrIiwiZm9yIiwicSIsInUiLCJ3IiwieSIsInoiLCJhYSIsImJhIiwiQSIsIml0ZXJhdG9yIiwiQiIsImgiLCJjYSIsIkMiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiRCIsIkUiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImN1cnJlbnQiLCJKIiwiSyIsIkwiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJjaGlsZHJlbiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJSIiwiVSIsIlMiLCJUIiwiZG9uZSIsIj0iLCI6IiwiZXNjYXBlIiwiZWEiLCJmYSIsIlYiLCJkYSIsIlciLCJYIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY3JlYXRlRWxlbWVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInZlcnNpb24iLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiZGVmYXVsdCIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJEYSIsIkVhIiwiTWF0aCIsInJhbmRvbSIsIkZhIiwiR2EiLCJIYSIsInBhcmVudE5vZGUiLCJ0YWciLCJJYSIsIkphIiwiS2EiLCJMYSIsInJldHVybiIsIk1hIiwiZGlzcGF0Y2hDb25maWciLCJOYSIsIl90YXJnZXRJbnN0IiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWEiLCJWYSIsIldhIiwic3R5bGUiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGEiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwidGV4dENvbnRlbnQiLCJmYiIsImdiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpYiIsImV2ZW50UG9vbCIsImpiIiwiZGVzdHJ1Y3RvciIsImhiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJkb2N1bWVudE1vZGUiLCJwYiIsInFiIiwicmIiLCJzYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ0YiIsInViIiwia2V5Q29kZSIsInZiIiwiZGV0YWlsIiwid2IiLCJ6YiIsImxvY2FsZSIsIndoaWNoIiwieGIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ5YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJNYiIsIm5vZGVOYW1lIiwiTmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIk9iIiwic2V0QXR0cmlidXRlIiwiUGIiLCJSYiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiUWIiLCJTYiIsImNoZWNrZWQiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImtjIiwibGMiLCJtYyIsIm5jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJ2aWV3IiwiUmMiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiU2MiLCJnZXRNb2RpZmllclN0YXRlIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJaYyIsInBvaW50ZXJJZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2QiLCJpZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJqZCIsImNsaXBib2FyZERhdGEiLCJrZCIsImxkIiwiY2hhckNvZGUiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsImxvY2F0aW9uIiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiYm9keSIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiTmQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUmQiLCJTZCIsInNlbGVjdCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJiZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2UiLCJkZSIsImVlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImZlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsImdlIiwiaGUiLCJpZSIsImplIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJrZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsImxlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJtZSIsIm5lIiwib2UiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInBlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwidHJhY2siLCJ3YnIiLCJxZSIsImlzIiwic2UiLCJibHVyIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwic2V0VGltZW91dCIsInplIiwiY2xlYXJUaW1lb3V0IiwiQWUiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiQmUiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIkRlIiwiRWUiLCJTZXQiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJnZXRDaGlsZENvbnRleHQiLCJPZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJVZSIsImVsZW1lbnRUeXBlIiwicGVuZGluZ1Byb3BzIiwiY29udGV4dERlcGVuZGVuY2llcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25UaW1lIiwiVmUiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsImNmIiwiZGlkRXJyb3IiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJkZiIsImZmIiwibGF0ZXN0UGluZ2VkVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJnZiIsIm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uIiwiamYiLCJrZiIsImJhc2VTdGF0ZSIsInRmIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImxmIiwibmYiLCJtZiIsInBheWxvYWQiLCJjYWxsYmFjayIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwic3RhdGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsIk1hcCIsImRlbGV0ZSIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsInF1ZXVlIiwiYmFzZVVwZGF0ZSIsIm5nIiwib2ciLCJwZyIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJkaXNwYXRjaCIsImFjdGlvbiIsInFnIiwibGFzdCIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsInJnIiwiZGVzdHJveSIsImRlcHMiLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwicmVhZENvbnRleHQiLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIlFnIiwiUmciLCJwZW5kaW5nQ29udGV4dCIsIlNnIiwidGltZWRPdXRBdCIsImZhbGxiYWNrIiwiVGciLCJVZyIsImhmIiwiV2UiLCJoeWRyYXRlIiwiaGlkZGVuIiwiZmlyc3QiLCJvYnNlcnZlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwic3RhY2siLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwib25DbGljayIsIm9uY2xpY2siLCJwaCIsIldlYWtTZXQiLCJxaCIsInJoIiwic2giLCJ0aCIsInZoIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ3aCIsInhoIiwieWgiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiemgiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQ2UiLCJkaXNwbGF5IiwidWgiLCJoaSIsIlhoIiwiaGFzIiwiYWRkIiwiQmgiLCJXZWFrTWFwIiwiQ2giLCJEaCIsIkVoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJGaCIsImNvbXBvbmVudFN0YWNrIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJWaCIsIlpoIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZWYiLCJQZCIsIlloIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJmaW5pc2hlZFdvcmsiLCIkaCIsImFpIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiYmkiLCJjaSIsImRpIiwibWF4RHVyYXRpb24iLCJwaW5nQ2FjaGUiLCJlaSIsImZpIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJnaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVuc3RhYmxlX25vdyIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsInRpbWVvdXRIYW5kbGUiLCJCaSIsIkNpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJPaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJQaSIsIl9pbnRlcm5hbFJvb3QiLCJRaSIsIlNpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiUmkiLCJUaSIsIk1pIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJXaSIsIlhpIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsIl9zY2hlZE1vY2siLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJfdHlwZW9mMiIsIl9zZXRQcm90b3R5cGVPZiIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic2hpZnQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwibm9ybWFsaXplZE5hbWUiLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsImNvbHVtbk51bWJlciIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJyZWxhdGl2ZVVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJhcnIiLCJzaW5nbGVNYXRjaGVyIiwibXVsdGlNYXRjaGVyIiwiZGVjb2RlQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJyaWdodCIsImVuY29kZWRVUkkiLCJyZXBsYWNlTWFwIiwiJUZFJUZGIiwiJUZGJUZFIiwiZW50cmllcyIsImN1c3RvbURlY29kZVVSSUNvbXBvbmVudCIsInNlcGFyYXRvciIsInNlcGFyYXRvckluZGV4IiwiX2luaGVyaXRzTG9vc2UiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJlc20iLCJyZWFjdF9kZWZhdWx0IiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsImd1ZF9kZWZhdWx0IiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsImhhbmRsZXIiLCJjaGFuZ2VkQml0cyIsImluaGVyaXRzTG9vc2VfZGVmYXVsdCIsIl9wcm90byIsIl9yZWYiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsInJlYWN0IiwicHJvcF90eXBlc19kZWZhdWx0IiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJfZXh0ZW5kcyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJsaXN0IiwicmVzb2x2ZV9wYXRobmFtZSIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsInBhcnQiLCJ2YWx1ZV9lcXVhbCIsInZhbHVlRXF1YWwiLCJldmVyeSIsIml0ZW0iLCJhVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiaXNQcm9kdWN0aW9uIiwidGlueV9pbnZhcmlhbnRfZXNtIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsIlBvcFN0YXRlRXZlbnQiLCJIYXNoQ2hhbmdlRXZlbnQiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJldmVudCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1heCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwicmVhY3Rfcm91dGVyX2NvbnRleHQiLCJyZWFjdF9yb3V0ZXJfY3JlYXRlTmFtZWRDb250ZXh0IiwicmVhY3Rfcm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsImNhY2hlJDEiLCJjYWNoZUxpbWl0JDEiLCJjYWNoZUNvdW50JDEiLCJtYXRjaFBhdGgiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwicmVnZXhwIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsImNvbXBpbGVQYXRoJDEiLCJ2YWx1ZXMiLCJyZWFjdF9yb3V0ZXJfUm91dGUiLCJSb3V0ZSIsImNvbnRleHQkJDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJpc0VtcHR5Q2hpbGRyZW4iLCJyZWFjdF9yb3V0ZXJfYWRkTGVhZGluZ1NsYXNoIiwicmVhY3Rfcm91dGVyX3N0cmlwQmFzZW5hbWUiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsInJlYWN0X3JvdXRlcl9Td2l0Y2giLCJTd2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiUmVhY3RSZWR1eENvbnRleHQiLCJiYXRjaF9iYXRjaCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJzdG9yZSIsInBhcmVudFN1YiIsInVuc3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsInN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiaXNTdWJzY3JpYmVkIiwiYmF0Y2giLCJjbGVhciIsInNwbGljZSIsInRyeVVuc3Vic2NyaWJlIiwiUHJvdmlkZXJfUHJvdmlkZXIiLCJub3RpZnlTdWJzY3JpYmVycyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJwcmV2UHJvcHMiLCJDb250ZXh0IiwiY29tcG9uZW50c19Qcm92aWRlciIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwidXBkYXRlQ291bnQiLCJpbml0U3RhdGVVcGRhdGVzIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkd2l0aFJlZiIsIndpdGhSZWYiLCJfcmVmMiRmb3J3YXJkUmVmIiwiX3JlZjIkY29udGV4dCIsImNvbm5lY3RPcHRpb25zIiwiYnJvd3Nlcl9kZWZhdWx0IiwiV3JhcHBlZENvbXBvbmVudCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJfdXNlTWVtbyIsImZvcndhcmRlZFJlZiIsIndyYXBwZXJQcm9wcyIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsInJlYWN0X2lzIiwiY29udGV4dFZhbHVlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiZGlkU3RvcmVDb21lRnJvbUNvbnRleHQiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJjcmVhdGVDaGlsZFNlbGVjdG9yIiwiX3VzZU1lbW8yIiwib3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSIsIl91c2VSZWR1Y2VyIiwicHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJsYXN0Q2hpbGRQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwicmVuZGVySXNTY2hlZHVsZWQiLCJhY3R1YWxDaGlsZFByb3BzIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsInJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCIsIkNvbm5lY3QiLCJmb3J3YXJkZWQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19janNfZGVmYXVsdCIsImhhc093biIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsIl9kZWZpbmVQcm9wZXJ0eSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcmciLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsImNyZWF0ZVN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsIm1pZGRsZXdhcmUiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImNvbm5lY3RfbWFwU3RhdGVUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsImNvbm5lY3RfbWVyZ2VQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJjb25uZWN0X21hdGNoIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJjb25uZWN0X2Nvbm5lY3QiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsIm5ld0JhdGNoIiwicmVhY3RfZG9tIiwiQWN0aW9ucyIsIkdFVF9XRUxDT01FIiwidHlwZXMiLCJnZXRXZWxjb21lIiwiVGVzdFJlZHV4IiwiY2xhc3NDYWxsQ2hlY2tfZGVmYXVsdCIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fZGVmYXVsdCIsImdldFByb3RvdHlwZU9mX2RlZmF1bHQiLCJpbmhlcml0c19kZWZhdWx0IiwiY3JlYXRlQ2xhc3NfZGVmYXVsdCIsImNvbm5lY3QiLCJ0ZXN0UmVkdXgiLCJIb21lIiwiQ29tcG9uZW50c19UZXN0UmVkdXgiLCJOb3RGb3VuZCIsIlNlcGFyYXRvciIsImNsYXNzTmFtZSIsIlNvY2lhbExvZ2luIiwib3Jfc2VwYXJhdG9yIiwiZmFjZWJvb2tMaW5rIiwidHdpdHRlckxpbmsiLCJnb29nbGVMaW5rIiwiTG9naW4iLCJxdWVyeVN0cmluZyIsImxvZyIsInNvY2lhbExvZ2luIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJhY3Rpb25zIiwiaW5pdGlhbFN0YXRlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiZXMiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJjb21iaW5lUmVkdWNlcnMiLCJfb2JqZWN0U3ByZWFkIiwiQXBwIiwiUmVhY3RET00iLCJzcmNfQXBwX0FwcCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxH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OEQsU0FBU3E4RCxlQUFlIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IHN0cmljdFVyaUVuY29kZSA9IHJlcXVpcmUoJ3N0cmljdC11cmktZW5jb2RlJyk7XG5jb25zdCBkZWNvZGVDb21wb25lbnQgPSByZXF1aXJlKCdkZWNvZGUtdXJpLWNvbXBvbmVudCcpO1xuY29uc3Qgc3BsaXRPbkZpcnN0ID0gcmVxdWlyZSgnc3BsaXQtb24tZmlyc3QnKTtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0c3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgaW5kZXgsICddJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHQuLi5yZXN1bHQsXG5cdFx0XHRcdFx0W2VuY29kZShrZXksIG9wdGlvbnMpLCAnWycsIGVuY29kZShpbmRleCwgb3B0aW9ucyksICddPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXG5cdFx0XHRcdF07XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4ga2V5ID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbXSddLmpvaW4oJycpXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbXT0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRcdHJldHVybiBbW2VuY29kZShrZXksIG9wdGlvbnMpLCAnPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbW3Jlc3VsdCwgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignLCcpXTtcblx0XHRcdH07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdFx0cmV0dXJuIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikgPT4ge1xuXHRcdFx0XHRjb25zdCBpc0FycmF5ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5zcGxpdCgnJykuaW5kZXhPZignLCcpID4gLTE7XG5cdFx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gaXNBcnJheSA/IHZhbHVlLnNwbGl0KCcsJykgOiB2YWx1ZTtcblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IG5ld1ZhbHVlO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFzaChpbnB1dCkge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBleHRyYWN0KGlucHV0KSB7XG5cdGlucHV0ID0gcmVtb3ZlSGFzaChpbnB1dCk7XG5cdGNvbnN0IHF1ZXJ5U3RhcnQgPSBpbnB1dC5pbmRleE9mKCc/Jyk7XG5cdGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRkZWNvZGU6IHRydWUsXG5cdFx0c29ydDogdHJ1ZSxcblx0XHRhcnJheUZvcm1hdDogJ25vbmUnLFxuXHRcdHBhcnNlTnVtYmVyczogZmFsc2UsXG5cdFx0cGFyc2VCb29sZWFuczogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXQudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIWlucHV0KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgaW5wdXQuc3BsaXQoJyYnKSkge1xuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3QocGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJyksICc9Jyk7XG5cblx0XHQvLyBNaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcblx0XHR2YWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlKHZhbHVlLCBvcHRpb25zKTtcblxuXHRcdGlmIChvcHRpb25zLnBhcnNlTnVtYmVycyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcih2YWx1ZSkpICYmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnRyaW0oKSAhPT0gJycpKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIGlmIChvcHRpb25zLnBhcnNlQm9vbGVhbnMgJiYgdmFsdWUgIT09IG51bGwgJiYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyB8fCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnZmFsc2UnKSkge1xuXHRcdFx0dmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG5cdFx0fVxuXG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnNvcnQgPT09IGZhbHNlKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHJldHVybiAob3B0aW9ucy5zb3J0ID09PSB0cnVlID8gT2JqZWN0LmtleXMocmV0KS5zb3J0KCkgOiBPYmplY3Qua2V5cyhyZXQpLnNvcnQob3B0aW9ucy5zb3J0KSkucmVkdWNlKChyZXN1bHQsIGtleSkgPT4ge1xuXHRcdGNvbnN0IHZhbHVlID0gcmV0W2tleV07XG5cdFx0aWYgKEJvb2xlYW4odmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHQvLyBTb3J0IG9iamVjdCBrZXlzLCBub3QgdmFsdWVzXG5cdFx0XHRyZXN1bHRba2V5XSA9IGtleXNTb3J0ZXIodmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuXG5leHBvcnRzLmV4dHJhY3QgPSBleHRyYWN0O1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuXG5leHBvcnRzLnN0cmluZ2lmeSA9IChvYmplY3QsIG9wdGlvbnMpID0+IHtcblx0aWYgKCFvYmplY3QpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZW5jb2RlOiB0cnVlLFxuXHRcdHN0cmljdDogdHJ1ZSxcblx0XHRhcnJheUZvcm1hdDogJ25vbmUnXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IGZvcm1hdHRlciA9IGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRpb25zKTtcblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cblx0aWYgKG9wdGlvbnMuc29ydCAhPT0gZmFsc2UpIHtcblx0XHRrZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcblx0fVxuXG5cdHJldHVybiBrZXlzLm1hcChrZXkgPT4ge1xuXHRcdGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG5cblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShrZXksIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdC5yZWR1Y2UoZm9ybWF0dGVyKGtleSksIFtdKVxuXHRcdFx0XHQuam9pbignJicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKSArICc9JyArIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdH0pLmZpbHRlcih4ID0+IHgubGVuZ3RoID4gMCkuam9pbignJicpO1xufTtcblxuZXhwb3J0cy5wYXJzZVVybCA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdHVybDogcmVtb3ZlSGFzaChpbnB1dCkuc3BsaXQoJz8nKVswXSB8fCAnJyxcblx0XHRxdWVyeTogcGFyc2UoZXh0cmFjdChpbnB1dCksIG9wdGlvbnMpXG5cdH07XG59O1xuIiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGNhKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2QsYyxlLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZCl9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QihcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2soSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtudWxsPT09YT9CKFwiMzIxXCIpOnZvaWQgMDtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpiYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjphYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7bnVsbD09PWF8fHZvaWQgMD09PWE/QihcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZT1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPVxuYil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOC42XCIsXG51bnN0YWJsZV9Db25jdXJyZW50TW9kZTp4LHVuc3RhYmxlX1Byb2ZpbGVyOnUsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRPd25lcjpKLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bYyxkLGUsZixnLGhdLGs9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW2srK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB4KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6eChcIjIyN1wiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgsbCl7dmFyIGs9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsayl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxsKXtkYT0hMTtlYT1udWxsO2NhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBrPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB4KFwiMTk4XCIpLGs9dm9pZCAwO2ZhfHwoZmE9ITAsaGE9ayl9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp4KFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6eChcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT94KFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgbD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGwpe2ZvcihlIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShlKSYmcWEobFtlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6eChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT94KFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e30sdGE9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtudWxsPT1iP3goXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBCYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT94KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP3goXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXRhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBEYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSYmKHlhKGEsQWEpLHphP3goXCI5NVwiKTp2b2lkIDAsZmEpKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt4KFwiMzNcIil9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSwkYT1XYShcInRyYW5zaXRpb25lbmRcIiksYWI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJiPW51bGwsY2I9bnVsbCxkYj1udWxsO1xuZnVuY3Rpb24gZWIoKXtpZihkYilyZXR1cm4gZGI7dmFyIGEsYj1jYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBkYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGZiKCl7cmV0dXJuITB9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2ZiOmdiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2I7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZmIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZmIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZmJ9LGlzUGVyc2lzdGVudDpnYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtoYihjKTtyZXR1cm4gY307aGIoeSk7ZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gamIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOngoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gaGIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9aWI7YS5yZWxlYXNlPWpifXZhciBrYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPVs5LDEzLDI3LDMyXSxuYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csb2I9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYob2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBwYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIW9iLHFiPVJhJiYoIW5ifHxvYiYmODxvYiYmMTE+PW9iKSxyYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxzYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx0Yj0hMTtcbmZ1bmN0aW9uIHViKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bWIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB2YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB3Yj0hMTtmdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3RiPSEwO3JldHVybiByYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1yYiYmdGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24geWIoYSxiKXtpZih3YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhbmImJnViKGEsYik/KGE9ZWIoKSxkYj1jYj1iYj1udWxsLHdiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBxYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgemI9e2V2ZW50VHlwZXM6c2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG5iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9c2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9c2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXNiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB3Yj91YihhLGMpJiYoZT1zYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXNiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHFiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHdifHxlIT09c2IuY29tcG9zaXRpb25TdGFydD9lPT09c2IuY29tcG9zaXRpb25FbmQmJndiJiYoZj1lYigpKTooYmI9ZCxjYj1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCx3Yj1cbiEwKSksZT1rYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj12YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cGI/eGIoYSxjKTp5YihhLGMpKT8oYj1sYi5nZXRQb29sZWQoc2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEFiPW51bGwsQmI9bnVsbCxDYj1udWxsO2Z1bmN0aW9uIERiKGEpe2lmKGE9dWEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBYj94KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj10YShhLnN0YXRlTm9kZSk7QWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBFYihhKXtCYj9DYj9DYi5wdXNoKGEpOkNiPVthXTpCYj1hfWZ1bmN0aW9uIEZiKCl7aWYoQmIpe3ZhciBhPUJiLGI9Q2I7Q2I9QmI9bnVsbDtEYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspRGIoYlthXSl9fVxuZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBJYigpe312YXIgSmI9ITE7ZnVuY3Rpb24gS2IoYSxiKXtpZihKYilyZXR1cm4gYShiKTtKYj0hMDt0cnl7cmV0dXJuIEdiKGEsYil9ZmluYWxseXtpZihKYj0hMSxudWxsIT09QmJ8fG51bGwhPT1DYilJYigpLEZiKCl9fXZhciBMYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBNYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIUxiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIE5iKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBPYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFFiKGEpe3ZhciBiPVBiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBSYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9UWIoYSkpfWZ1bmN0aW9uIFNiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1QYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBUYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtUYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtcbnZhciBVYj0vXiguKilbXFxcXFxcL10vLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixWYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFdiPXo/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixYYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxZYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxaYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCwkYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxhYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGJjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxjYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixkYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxlYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsZmM9ej9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixnYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gaGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWdjJiZhW2djXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gaWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBiYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBYYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBXYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgWmI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgWWI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBkYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGFjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgJGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBjYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgZWM6cmV0dXJuIGljKGEudHlwZSk7Y2FzZSBmYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIGljKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIGpjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1pYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1pYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFViLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIga2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbWM9e30sbmM9e307XG5mdW5jdGlvbiBvYyhhKXtpZihsYy5jYWxsKG5jLGEpKXJldHVybiEwO2lmKGxjLmNhbGwobWMsYSkpcmV0dXJuITE7aWYoa2MudGVzdChhKSlyZXR1cm4gbmNbYV09ITA7bWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciByYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLFxuc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5mdW5jdGlvbiB0YyhhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChxYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHVjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB2YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiB3YyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIHhjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIHljKGEsYil7eGMoYSxiKTt2YXIgYz11YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT96YyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZ6YyhhLGIudHlwZSx1YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEFjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIHpjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgQmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gQ2MoYSxiLGMpe2E9eS5nZXRQb29sZWQoQmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtFYihjKTtRYShhKTtyZXR1cm4gYX12YXIgRGM9bnVsbCxFYz1udWxsO2Z1bmN0aW9uIEZjKGEpe0RhKGEpfVxuZnVuY3Rpb24gR2MoYSl7dmFyIGI9SmEoYSk7aWYoU2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSGMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgSWM9ITE7UmEmJihJYz1PYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBKYygpe0RjJiYoRGMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpLEVjPURjPW51bGwpfWZ1bmN0aW9uIEtjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZHYyhFYykmJihhPUNjKEVjLGEsTmIoYSkpLEtiKEZjLGEpKX1mdW5jdGlvbiBMYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oSmMoKSxEYz1iLEVjPWMsRGMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpKTpcImJsdXJcIj09PWEmJkpjKCl9ZnVuY3Rpb24gTWMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gR2MoRWMpfVxuZnVuY3Rpb24gTmMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBHYyhiKX1mdW5jdGlvbiBPYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBHYyhiKX1cbnZhciBQYz17ZXZlbnRUeXBlczpCYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkljLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9SGM6TWIoZSk/SWM/Zj1PYzooZj1NYyxnPUxjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1OYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gQ2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZ6YyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxRYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksUmM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gU2MoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1SY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFRjKCl7cmV0dXJuIFNjfVxudmFyIFVjPTAsVmM9MCxXYz0hMSxYYz0hMSxZYz1RYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9VWM7VWM9YS5zY3JlZW5YO3JldHVybiBXYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFdjPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9VmM7VmM9YS5zY3JlZW5ZO3JldHVybiBYYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFhjPSEwLDApfX0pLFpjPVljLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSwkYz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sYWQ9e2V2ZW50VHlwZXM6JGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMCxrPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPVljLGg9JGMubW91c2VMZWF2ZSxsPSRjLm1vdXNlRW50ZXIsaz1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPVpjLGg9JGMucG9pbnRlckxlYXZlLGw9JGMucG9pbnRlckVudGVyLGs9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWsrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChsLGIsYyxkKTtjLnR5cGU9aytcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2s9MDtmb3IoZz1iO2c7Zz1MYShnKSlrKys7Zz0wO2ZvcihsPWU7bDtsPUxhKGwpKWcrKztmb3IoOzA8ay1nOyliPUxhKGIpLGstLTtmb3IoOzA8Zy1rOyllPUxhKGUpLGctLTtmb3IoO2stLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2s9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtrPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBjZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gZGQoYSxiKXtpZihiZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWNkLmNhbGwoYixjW2RdKXx8IWJkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gZmQoYSl7MiE9PWVkKGEpP3goXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9ZWQoYSksMz09PWI/eChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gZmQoZSksYTtpZihnPT09ZClyZXR1cm4gZmQoZSksYjtnPWcuc2libGluZ314KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6eChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3goXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz94KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhkKGEpe2E9Z2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgaWQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLGpkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksa2Q9UWMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBsZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBtZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sbmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LG9kPVFjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1tZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1sZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/bmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2xkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2xkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkscGQ9WWMuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPVFjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjfSkscmQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9WWMuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtYYSxcImFuaW1hdGlvbkVuZFwiXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbJGEsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx1ZD17fSx2ZD17fTtmdW5jdGlvbiB3ZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3VkW2FdPWI7dmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCEwKX0pO3RkLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMSl9KTtcbnZhciB4ZD17ZXZlbnRUeXBlczp1ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1sZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9b2Q7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWtkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9WWM7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1pZDticmVhaztjYXNlICRhOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9UWM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPWpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9WmM7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LHlkPXhkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbnpkPVtdO2Z1bmN0aW9uIEFkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU5iKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPG9hLmxlbmd0aDtoKyspe3ZhciBsPW9hW2hdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXhhKGcsbCkpfURhKGcpfX12YXIgQmQ9ITA7XG5mdW5jdGlvbiBFKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gRWQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBDZChhLGIpe0hiKERkLGEsYil9XG5mdW5jdGlvbiBEZChhLGIpe2lmKEJkKXt2YXIgYz1OYihiKTtjPUhhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09ZWQoYyl8fChjPW51bGwpO2lmKHpkLmxlbmd0aCl7dmFyIGQ9emQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7S2IoQWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD56ZC5sZW5ndGgmJnpkLnB1c2goYSl9fX12YXIgRmQ9e30sR2Q9MCxIZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBJZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxIZCl8fChhW0hkXT1HZCsrLEZkW2FbSGRdXT17fSk7cmV0dXJuIEZkW2FbSGRdXX1mdW5jdGlvbiBKZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gS2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGQoYSxiKXt2YXIgYz1LZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZChjKX19ZnVuY3Rpb24gTWQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZCgpe2Zvcih2YXIgYT13aW5kb3csYj1KZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1KZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gUGQoKXt2YXIgYT1OZCgpO2lmKE9kKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntiPShiPWEub3duZXJEb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgYz1iLmdldFNlbGVjdGlvbiYmYi5nZXRTZWxlY3Rpb24oKTtpZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEEpe2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGw9MCxrPTAsbT1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB0Ozspe20hPT1ifHwwIT09ZCYmMyE9PW0ubm9kZVR5cGV8fChnPWYrZCk7bSE9PWV8fDAhPT1jJiYzIT09bS5ub2RlVHlwZXx8KGg9ZitjKTszPT09bS5ub2RlVHlwZSYmKGYrPW0ubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHQ9bS5maXJzdENoaWxkKSlicmVhaztwPW07bT10fWZvcig7Oyl7aWYobT09PWEpYnJlYWsgYjtwPT09YiYmKytsPT09ZCYmKGc9Zik7cD09PWUmJisraz09PWMmJihoPWYpO2lmKG51bGwhPT0odD1tLm5leHRTaWJsaW5nKSlicmVhazttPXA7cD1tLnBhcmVudE5vZGV9bT10fWI9LTE9PT1nfHwtMT09PWg/bnVsbDp7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cmV0dXJue2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn19XG5mdW5jdGlvbiBRZChhKXt2YXIgYj1OZCgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTWQoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk9kKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUxkKGMsZik7dmFyIGc9TGQoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBSZD1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFNkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxUZD1udWxsLFVkPW51bGwsVmQ9bnVsbCxXZD0hMTtcbmZ1bmN0aW9uIFhkKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoV2R8fG51bGw9PVRkfHxUZCE9PUpkKGMpKXJldHVybiBudWxsO2M9VGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmT2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gVmQmJmRkKFZkLGMpP251bGw6KFZkPWMsYT15LmdldFBvb2xlZChTZC5zZWxlY3QsVWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1UZCxRYShhKSxhKX1cbnZhciBZZD17ZXZlbnRUeXBlczpTZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1JZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihNYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlUZD1lLFVkPWIsVmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlZkPVVkPVRkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOldkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gV2Q9ITEsWGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBYZChjLGQpfXJldHVybiBudWxsfX07QmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt0YT1LYTt1YT1JYTt2YT1KYTtCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOnhkLEVudGVyTGVhdmVFdmVudFBsdWdpbjphZCxDaGFuZ2VFdmVudFBsdWdpbjpQYyxTZWxlY3RFdmVudFBsdWdpbjpZZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnpifSk7ZnVuY3Rpb24gWmQoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkZChhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVpkKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBhZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGJlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/eChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOngoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnVjKGMpfX1cbmZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9dWMoYi52YWx1ZSksZD11YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGVlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBmZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBnZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGhlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9nZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBpZT12b2lkIDAsamU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09ZmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7aWU9aWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9aWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24ga2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBsZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxtZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobGUpLmZvckVhY2goZnVuY3Rpb24oYSl7bWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtsZVtiXT1sZVthXX0pfSk7ZnVuY3Rpb24gbmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGxlLmhhc093blByb3BlcnR5KGEpJiZsZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBvZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1uZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBwZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcWUoYSxiKXtiJiYocGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/eChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp4KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT94KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gcmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gc2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6RWQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkVkKFwiZm9jdXNcIixhKTtFZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6T2IoZSkmJkVkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFiLmluZGV4T2YoZSkmJkUoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gdGUoKXt9dmFyIHVlPW51bGwsdmU9bnVsbDtcbmZ1bmN0aW9uIHdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiB4ZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgeWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsemU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEFlPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxCZT1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCxlKXthW0dhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZ4YyhhLGUpO3JlKGMsZCk7ZD1yZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP29lKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9qZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/a2UoYSxoKTp0YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9hZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTphZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gRGUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBFZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgRmU9W10sR2U9LTE7ZnVuY3Rpb24gRihhKXswPkdlfHwoYS5jdXJyZW50PUZlW0dlXSxGZVtHZV09bnVsbCxHZS0tKX1mdW5jdGlvbiBHKGEsYil7R2UrKztGZVtHZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBIZT17fSxIPXtjdXJyZW50OkhlfSxJPXtjdXJyZW50OiExfSxJZT1IZTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSGU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gSihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEtlKGEpe0YoSSxhKTtGKEgsYSl9ZnVuY3Rpb24gTGUoYSl7RihJLGEpO0YoSCxhKX1cbmZ1bmN0aW9uIE1lKGEsYixjKXtILmN1cnJlbnQhPT1IZT94KFwiMTY4XCIpOnZvaWQgMDtHKEgsYixhKTtHKEksYyxhKX1mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp4KFwiMTA4XCIsaWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxIZTtJZT1ILmN1cnJlbnQ7RyhILGIsYSk7RyhJLEkuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp4KFwiMTY5XCIpO2M/KGI9TmUoYSxiLEllKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRihJLGEpLEYoSCxhKSxHKEgsYixhKSk6RihJLGEpO0coSSxjLGEpfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFRlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1FlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtSZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmNvbnRleHREZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gSyhhLGIsYyxkKXtyZXR1cm4gbmV3IFVlKGEsYixjLGQpfVxuZnVuY3Rpb24gVmUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBXZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gVmUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWNjKXJldHVybiAxMTtpZihhPT09ZWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1LKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpVmUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgWGI6cmV0dXJuIFplKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgYmM6cmV0dXJuICRlKGMsZXwzLGYsYik7Y2FzZSBZYjpyZXR1cm4gJGUoYyxlfDIsZixiKTtjYXNlIFpiOnJldHVybiBhPUsoMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1aYixhLnR5cGU9WmIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBkYzpyZXR1cm4gYT1LKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWRjLGEudHlwZT1kYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgJGI6Zz0xMDticmVhayBhO2Nhc2UgYWM6Zz05O2JyZWFrIGE7Y2FzZSBjYzpnPTExO2JyZWFrIGE7Y2FzZSBlYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGZjOmc9MTY7ZD1udWxsO2JyZWFrIGF9eChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPUsoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBaZShhLGIsYyxkKXthPUsoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uICRlKGEsYixjLGQpe2E9Syg4LGEsZCxiKTtiPTA9PT0oYiYxKT9ZYjpiYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGFmKGEsYixjKXthPUsoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gYmYoYSxiLGMpe2I9Syg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBjZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTtpZigwPT09YilhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle2I8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWMmJihjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+YiYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTswPT09Yz9jZihhLGIpOmI8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGNmKGEsYikpOlxuYj5jJiZjZihhLGIpfWRmKDAsYSl9ZnVuY3Rpb24gZmYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gTChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIGpmPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24ga2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgdGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1lZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UudGFnPXJmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bGYoKTtjPW1mKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG5zZjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7b2YoKTtwZihhLGQpO3FmKGEsYyl9fTtmdW5jdGlvbiB1ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFkZChjLGQpfHwhZGQoZSxmKTohMH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD0hMSxlPUhlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU0oZik6KGU9SihiKT9JZTpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9KZShhLGUpOkhlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9dGY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gd2YoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24geGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU0oZik6KGY9SihiKT9JZTpILmN1cnJlbnQsZS5jb250ZXh0PUplKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihrZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBBZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/eChcIjMwOVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6eChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09amYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/eChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOngoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEJmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ4KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBDZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVhlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPUFmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1ZZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1BZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWJmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVplKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1hZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYz1ZZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1BZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgV2I6cmV0dXJuIGI9YmYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHpmKGIpfHxcbmhjKGIpKXJldHVybiBiPVplKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO0JmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVhiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpsKGEsYixjLGQpOm51bGw7Y2FzZSBXYjpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbH1pZih6ZihjKXx8aGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO0JmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1YYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmwoYixhLGQsZSk7Y2FzZSBXYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKX1pZih6ZihkKXx8aGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO0JmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscT1nLHU9Zz0wLEI9bnVsbDtudWxsIT09cSYmdTxoLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHc9dChlLHEsaFt1XSxrKTtpZihudWxsPT09dyl7bnVsbD09PXEmJihxPUIpO2JyZWFrfWEmJlxucSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9Qn1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHE9cChlLGhbdV0saykpZz1mKHEsZyx1KSxudWxsPT09bT9sPXE6bS5zaWJsaW5nPXEsbT1xO3JldHVybiBsfWZvcihxPWQoZSxxKTt1PGgubGVuZ3RoO3UrKylpZihCPUEocSxlLHUsaFt1XSxrKSlhJiZudWxsIT09Qi5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT1CLmtleT91OkIua2V5KSxnPWYoQixnLHUpLG51bGw9PT1tP2w9QjptLnNpYmxpbmc9QixtPUI7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBSKGUsZyxoLGspe3ZhciBsPWhjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3goXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/eChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHE9Zyx1PWc9MCxCPW51bGwsdz1oLm5leHQoKTtudWxsIT09cSYmIXcuZG9uZTt1Kyssdz1oLm5leHQoKSl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdj10KGUscSx3LnZhbHVlLGspO2lmKG51bGw9PT12KXtxfHwocT1CKTticmVha31hJiZxJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7cT1CfWlmKHcuZG9uZSlyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PXAoZSx3LnZhbHVlLGspLG51bGwhPT13JiYoZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTtyZXR1cm4gbH1mb3IocT1kKGUscSk7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PUEocSxlLHUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGEmJm51bGwhPT13LmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXcua2V5P3U6XG53LmtleSksZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1YYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBWYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PVhiOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PVhiP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1BZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PVhiPyhkPVplKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1ZZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1BZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgV2I6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1iZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoemYoZikpcmV0dXJuIHYoYSxkLGYsaCk7aWYoaGMoZikpcmV0dXJuIFIoYSxkLGYsaCk7bCYmQmYoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx4KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgRGY9Q2YoITApLEVmPUNmKCExKSxGZj17fSxOPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj94KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7RyhIZixiLGEpO0coR2YsYSxhKTtHKE4sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWhlKGIsYyl9RihOLGEpO0coTixiLGEpfWZ1bmN0aW9uIEtmKGEpe0YoTixhKTtGKEdmLGEpO0YoSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTi5jdXJyZW50KTt2YXIgYz1oZShiLGEudHlwZSk7YiE9PWMmJihHKEdmLGEsYSksRyhOLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoRihOLGEpLEYoR2YsYSkpfVxudmFyIE5mPTAsT2Y9MixQZj00LFFmPTgsUmY9MTYsU2Y9MzIsVGY9NjQsVWY9MTI4LFZmPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsV2Y9MCxYZj1udWxsLE89bnVsbCxQPW51bGwsWWY9bnVsbCxRPW51bGwsWmY9bnVsbCwkZj0wLGFnPW51bGwsYmc9MCxjZz0hMSxkZz1udWxsLGVnPTA7ZnVuY3Rpb24gZmcoKXt4KFwiMzIxXCIpfWZ1bmN0aW9uIGdnKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWJkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUsZil7V2Y9ZjtYZj1iO1A9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7VmYuY3VycmVudD1udWxsPT09UD9pZzpqZztiPWMoZCxlKTtpZihjZyl7ZG8gY2c9ITEsZWcrPTEsUD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxaZj1ZZixhZz1RPU89bnVsbCxWZi5jdXJyZW50PWpnLGI9YyhkLGUpO3doaWxlKGNnKTtkZz1udWxsO2VnPTB9VmYuY3VycmVudD1rZzthPVhmO2EubWVtb2l6ZWRTdGF0ZT1ZZjthLmV4cGlyYXRpb25UaW1lPSRmO2EudXBkYXRlUXVldWU9YWc7YS5lZmZlY3RUYWd8PWJnO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2E/eChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9ZnVuY3Rpb24gbGcoKXtWZi5jdXJyZW50PWtnO1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDtjZz0hMTtkZz1udWxsO2VnPTB9XG5mdW5jdGlvbiBtZygpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UT9ZZj1RPWE6UT1RLm5leHQ9YTtyZXR1cm4gUX1mdW5jdGlvbiBuZygpe2lmKG51bGwhPT1aZilRPVpmLFpmPVEubmV4dCxPPVAsUD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle251bGw9PT1QP3goXCIzMTBcIik6dm9pZCAwO089UDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtRPW51bGw9PT1RP1lmPWE6US5uZXh0PWE7UD1PLm5leHR9cmV0dXJuIFF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1uZygpLGM9Yi5xdWV1ZTtudWxsPT09Yz94KFwiMzExXCIpOnZvaWQgMDtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPGVnKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1kZyl7dmFyIGU9ZGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe2RnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsbD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTttPFdmPyhrfHwoaz0hMCxoPWcsZT1mKSxtPiRmJiYoJGY9bSkpOmY9bC5lYWdlclJlZHVjZXI9PT1hP2wuZWFnZXJTdGF0ZTphKGYsbC5hY3Rpb24pO2c9bDtsPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWQpO2t8fChoPWcsZT1mKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09YWc/KGFnPXtsYXN0RWZmZWN0Om51bGx9LGFnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPWFnLmxhc3RFZmZlY3QsbnVsbD09PWI/YWcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsYWcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2coYSxiLGMsZCl7dmFyIGU9bWcoKTtiZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkKXt2YXIgZT1uZygpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmdnKGQsZy5kZXBzKSl7cmcoTmYsYyxmLGQpO3JldHVybn19Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyxmLGQpfWZ1bmN0aW9uIHVnKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmcoKXt9XG5mdW5jdGlvbiB3ZyhhLGIsYyl7MjU+ZWc/dm9pZCAwOngoXCIzMDFcIik7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVhmfHxudWxsIT09ZCYmZD09PVhmKWlmKGNnPSEwLGE9e2V4cGlyYXRpb25UaW1lOldmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1kZyYmKGRnPW5ldyBNYXApLGM9ZGcuZ2V0KGIpLHZvaWQgMD09PWMpZGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7b2YoKTt2YXIgZT1sZigpO2U9bWYoZSxhKTt2YXIgZj17ZXhwaXJhdGlvblRpbWU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1cbmR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGw9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGJkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31xZihhLGUpfX1cbnZhciBrZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmZyx1c2VDb250ZXh0OmZnLHVzZUVmZmVjdDpmZyx1c2VJbXBlcmF0aXZlSGFuZGxlOmZnLHVzZUxheW91dEVmZmVjdDpmZyx1c2VNZW1vOmZnLHVzZVJlZHVjZXI6ZmcsdXNlUmVmOmZnLHVzZVN0YXRlOmZnLHVzZURlYnVnVmFsdWU6Zmd9LGlnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7bWcoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHNnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW1nKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1nKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1tZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1tZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsXG5sYXN0UmVuZGVyZWRSZWR1Y2VyOm9nLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTp2Z30samc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0Zyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxcbmIpe3JldHVybiB0Zyg0LFBmfFNmLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6cGcsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIG5nKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHBnKG9nLGEpfSx1c2VEZWJ1Z1ZhbHVlOnZnfSx4Zz1udWxsLHlnPW51bGwsemc9ITE7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUsoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gQ2coYSl7aWYoemcpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUJnKGEsYikpe2I9RGUoYyk7aWYoIWJ8fCFCZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt6Zz0hMTt4Zz1hO3JldHVybn1BZyh4ZyxjKX14Zz1hO3lnPUVlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsemc9ITEseGc9YX19ZnVuY3Rpb24gRGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9ZnVuY3Rpb24gRWcoYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCF6ZylyZXR1cm4gRGcoYSksemc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF4ZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9eWc7YjspQWcoYSxiKSxiPURlKGIpO0RnKGEpO3lnPXhnP0RlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEZnKCl7eWc9eGc9bnVsbDt6Zz0hMX1cbnZhciBHZz1UYi5SZWFjdEN1cnJlbnRPd25lcixxZz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/RWYoYixudWxsLGMsZCk6RGYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0lnKGIsZSk7ZD1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFWZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxMZyhhLGIsZyxkLGUsZik7YT1ZZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmRkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEpnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVhlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZkZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihxZz0hMSxlPGYpP0pnKGEsYixmKTpNZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIE5nKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTWcoYSxiLGMsZCxlKXt2YXIgZj1KKGMpP0llOkguY3VycmVudDtmPUplKGIsZik7SWcoYixlKTtjPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBPZyhhLGIsYyxkLGUpe2lmKEooYykpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtJZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksdmYoYixjLGQsZSkseGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKTtQZz0hMTt2YXIgdD1iLm1lbW9pemVkU3RhdGU7bD1nLnN0YXRlPXQ7dmFyIEE9Yi51cGRhdGVRdWV1ZTtudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksbD1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx0IT09bHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSxsPWIubWVtb2l6ZWRTdGF0ZSksKGg9UGd8fHVmKGIsYyxoLGQsdCxsLGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWwpLGcucHJvcHM9ZCxnLnN0YXRlPWwsZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkwoYi50eXBlLGgpLGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspLFBnPSExLGw9Yi5tZW1vaXplZFN0YXRlLHQ9Zy5zdGF0ZT1sLEE9Yi51cGRhdGVRdWV1ZSxudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksdD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxsIT09dHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSx0PWIubWVtb2l6ZWRTdGF0ZSksKG09UGd8fHVmKGIsYyxoLGQsbCx0LGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1cbnQpLGcucHJvcHM9ZCxnLnN0YXRlPXQsZy5jb250ZXh0PWssZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIFFnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQsZSxmKXtOZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUGUoYixjLCExKSxKZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtHZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1EZihiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPURmKGIsbnVsbCxoLGYpKTpTKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlBlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9NZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZNZShhLGIuY29udGV4dCwhMSk7SmYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gU2coYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7aWYobnVsbD09PWEpaWYoZyl7dmFyIGg9ZS5mYWxsYmFjazthPVplKG51bGwsZCwwLG51bGwpOzA9PT0oYi5tb2RlJjEpJiYoYS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCk7ZD1aZShoLGQsYyxudWxsKTthLnNpYmxpbmc9ZDtjPWE7Yy5yZXR1cm49ZC5yZXR1cm49Yn1lbHNlIGM9ZD1FZihiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNlIG51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxoPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1YZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09XG5iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WGUoaCxjLGguZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9RGYoYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihoPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9WmUobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1oLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9WmUoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1EZihiLGgsZS5jaGlsZHJlbixjKSksYi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGU7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gSmcoYSxiLGMpe251bGwhPT1hJiYoYi5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3goXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBUZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8SS5jdXJyZW50KXFnPSEwO2Vsc2V7aWYoZDxjKXtxZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpSZyhiKTtGZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6SihiLnR5cGUpJiZPZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOlVnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBTZyhhLGIsYyk7Yj1KZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gSmcoYSxiLGMpfX1lbHNlIHFnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPVxuYi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1KZShiLEguY3VycmVudCk7SWcoYixjKTtlPWhnKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7bGcoKTtpZihKKGQpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYma2YoYixkLGcsYSk7ZS51cGRhdGVyPXRmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7eGYoYixkLGEsYyk7Yj1RZyhudWxsLGIsZCwhMCxmLFxuYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9aGYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1XZShhKTtmPUwoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9TWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz1PZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1IZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1LZyhudWxsLGIsYSxMKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6eChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksTWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsXG5lPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE9nKGEsYixkLGUsYyk7Y2FzZSAzOlJnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD94KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpRmcoKSxiPUpnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXlnPUVlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHhnPWIsZT16Zz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPUVmKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxGZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmQ2coYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLFxuZz1lLmNoaWxkcmVuLHhlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ4ZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxOZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUyhhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBTZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1EZihiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLEhnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtVZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9YmQoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUkuY3VycmVudCl7Yj1KZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgbD1oLmNvbnRleHREZXBlbmRlbmNpZXM7aWYobnVsbCE9PWwpe2c9aC5jaGlsZDtmb3IodmFyIGs9bC5maXJzdDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQmJjAhPT1cbihrLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYoaz1uZihjKSxrLnRhZz1zZixwZihoLGspKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2s9aC5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7az1jO2Zvcih2YXIgbT1oLnJldHVybjtudWxsIT09bTspe3ZhciBwPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxrKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1rLG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8ayYmKHAuY2hpbGRFeHBpcmF0aW9uVGltZT1rKTtlbHNlIGlmKG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8aylwLmNoaWxkRXhwaXJhdGlvblRpbWU9aztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP1xubnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sSWcoYixjKSxlPU0oZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUwoZSxiLnBlbmRpbmdQcm9wcyksZj1MKGUudHlwZSxmKSxLZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gTGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6TChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEooZCk/KGE9ITAsT2UoYikpOmE9ITEsSWcoYixjKSx2ZihiLGQsZSxjKSx4ZihiLGQsZSxjKSxRZyhudWxsLGIsZCwhMCxhLGMpfXgoXCIxNTZcIil9dmFyIFZnPXtjdXJyZW50Om51bGx9LFdnPW51bGwsWGc9bnVsbCxZZz1udWxsO2Z1bmN0aW9uIFVnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0coVmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIFpnKGEpe3ZhciBiPVZnLmN1cnJlbnQ7RihWZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElnKGEsYil7V2c9YTtZZz1YZz1udWxsO3ZhciBjPWEuY29udGV4dERlcGVuZGVuY2llcztudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZT49YiYmKHFnPSEwKTthLmNvbnRleHREZXBlbmRlbmNpZXM9bnVsbH1cbmZ1bmN0aW9uIE0oYSxiKXtpZihZZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpWWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PVhnPyhudWxsPT09V2c/eChcIjMwOFwiKTp2b2lkIDAsWGc9YixXZy5jb250ZXh0RGVwZW5kZW5jaWVzPXtmaXJzdDpiLGV4cGlyYXRpb25UaW1lOjB9KTpYZz1YZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgJGc9MCxyZj0xLHNmPTIsYWg9MyxQZz0hMTtmdW5jdGlvbiBiaChhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBjaChhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOiRnLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIGRoKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1iaChjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9Y2goZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9Y2goZCkpO251bGw9PT1lfHxkPT09ZT9kaChkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KGRoKGQsYiksZGgoZSxiKSk6KGRoKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZWgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpOmZoKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9Y2goYikpO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSByZjpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgYWg6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAkZzphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2Ugc2Y6UGc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB5ZihhLGIsYyxkLGUpe1BnPSExO2I9ZmgoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxsPWIuZmlyc3RVcGRhdGUsaz1mO251bGwhPT1sOyl7dmFyIG09bC5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1sLGY9ayksaDxtJiYoaD1tKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bDooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RFZmZlY3Q9bCkpKTtsPWwubmV4dH1tPW51bGw7Zm9yKGw9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1sOyl7dmFyIHA9bC5leHBpcmF0aW9uVGltZTtwPGU/KG51bGw9PT1tJiYobT1sLG51bGw9PT1nJiYoZj1rKSksaDxwJiYoaD1wKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1sOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bCkpKTtsPWwubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWspO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9a31cbmZ1bmN0aW9uIGhoKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtpaChiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7aWgoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGloKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGpoKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6amMoYil9fWZ1bmN0aW9uIGtoKGEpe2EuZWZmZWN0VGFnfD00fXZhciBsaD12b2lkIDAsbWg9dm9pZCAwLG5oPXZvaWQgMCxvaD12b2lkIDA7bGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O21oPWZ1bmN0aW9uKCl7fTtcbm5oPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj12YyhnLGYpO2Q9dmMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPSRkKGcsZik7ZD0kZChnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWJlKGcsZik7ZD1iZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXRlKX1xZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmc2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZraChiKX19O29oPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZraChiKX07XG52YXIgcGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gcWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1qYyhjKSk7bnVsbCE9PWMmJmljKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJmljKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3NoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHRoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09TmYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1OZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIHVoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1uZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gdmgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFJlJiZSZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe3NoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6cmgoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe3NoKGEsZil9YnJlYWs7Y2FzZSA1OnJoKGEpO2JyZWFrO2Nhc2UgNDp3aChhKX19XG5mdW5jdGlvbiB4aChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIHloKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHhoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn14KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6eChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKGtlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx4aChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyZcbjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9dGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiB3aChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz94KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYodmgoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnKXtpZihudWxsIT09Yi5jaGlsZCl7ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYodmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gemgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp0aChQZixRZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZDZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9bGYoKSkpO251bGwhPT1hJiZ1aChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBwaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUFoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fXZhciBCaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGgoZCk7cWgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Rmg/Rmg9bmV3IFNldChbdGhpc10pOkZoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7cWgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpKKGEudHlwZSkmJktlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEtmKGEpLExlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT94KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBNZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gWmcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBIaD1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEloPVRiLlJlYWN0Q3VycmVudE93bmVyLEpoPTEwNzM3NDE4MjIsS2g9ITEsVD1udWxsLExoPW51bGwsVT0wLE1oPS0xLE5oPSExLFY9bnVsbCxPaD0hMSxQaD1udWxsLFFoPW51bGwsUmg9bnVsbCxGaD1udWxsO2Z1bmN0aW9uIFNoKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTticmVhaztjYXNlIDU6TWYoYik7YnJlYWs7Y2FzZSA0OktmKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYil9YT1hLnJldHVybn1MaD1udWxsO1U9MDtNaD0tMTtOaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBUaCgpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYT1WLmVmZmVjdFRhZzthJjE2JiZrZShWLnN0YXRlTm9kZSxcIlwiKTtpZihhJjEyOCl7dmFyIGI9Vi5hbHRlcm5hdGU7bnVsbCE9PWImJihiPWIucmVmLG51bGwhPT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihudWxsKTpiLmN1cnJlbnQ9bnVsbCkpfXN3aXRjaChhJjE0KXtjYXNlIDI6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OnpoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODphPVYsd2goYSksYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsLGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFVoKCl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgYT1WLmFsdGVybmF0ZSxiPVY7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKE9mLE5mLGIpO2JyZWFrIGE7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6TChiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OngoXCIxNjNcIil9fVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFZoKGEsYil7Zm9yKDtudWxsIT09Vjspe3ZhciBjPVYuZWZmZWN0VGFnO2lmKGMmMzYpe3ZhciBkPVYuYWx0ZXJuYXRlLGU9VixmPWI7c3dpdGNoKGUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKFJmLFNmLGUpO2JyZWFrO2Nhc2UgMTp2YXIgZz1lLnN0YXRlTm9kZTtpZihlLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kKWcuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoPWUuZWxlbWVudFR5cGU9PT1lLnR5cGU/ZC5tZW1vaXplZFByb3BzOkwoZS50eXBlLGQubWVtb2l6ZWRQcm9wcyk7Zy5jb21wb25lbnREaWRVcGRhdGUoaCxkLm1lbW9pemVkU3RhdGUsZy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9ZD1lLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiZoaChlLGQsZyxmKTticmVhaztjYXNlIDM6ZD1lLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kKXtnPW51bGw7aWYobnVsbCE9PWUuY2hpbGQpc3dpdGNoKGUuY2hpbGQudGFnKXtjYXNlIDU6Zz1cbmUuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPWUuY2hpbGQuc3RhdGVOb2RlfWhoKGUsZCxnLGYpfWJyZWFrO2Nhc2UgNTpmPWUuc3RhdGVOb2RlO251bGw9PT1kJiZlLmVmZmVjdFRhZyY0JiZ3ZShlLnR5cGUsZS5tZW1vaXplZFByb3BzKSYmZi5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX1jJjEyOCYmKGU9Vi5yZWYsbnVsbCE9PWUmJihmPVYuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlP2UoZik6ZS5jdXJyZW50PWYpKTtjJjUxMiYmKFBoPWEpO1Y9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFdoKGEsYil7Umg9UWg9UGg9bnVsbDt2YXIgYz1XO1c9ITA7ZG97aWYoYi5lZmZlY3RUYWcmNTEyKXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7dmFyIGY9Yjt0aChVZixOZixmKTt0aChOZixUZixmKX1jYXRjaChnKXtkPSEwLGU9Z31kJiZzaChiLGUpfWI9Yi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1iKTtXPWM7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpO1h8fFd8fFloKDEwNzM3NDE4MjMsITEpfWZ1bmN0aW9uIG9mKCl7bnVsbCE9PVFoJiZCZShRaCk7bnVsbCE9PVJoJiZSaCgpfVxuZnVuY3Rpb24gWmgoYSxiKXtPaD1LaD0hMDthLmN1cnJlbnQ9PT1iP3goXCIxNzdcIik6dm9pZCAwO3ZhciBjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3goXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZSxlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtlZihhLGU+ZD9lOmQpO0loLmN1cnJlbnQ9bnVsbDtkPXZvaWQgMDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3VlPUJkO3ZlPVBkKCk7QmQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7dmFyIGY9dm9pZCAwO3RyeXtVaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1mb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtcbmY9dm9pZCAwO3RyeXtUaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1RZCh2ZSk7dmU9bnVsbDtCZD0hIXVlO3VlPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e1ZoKGEsYyl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWlmKG51bGwhPT1kJiZudWxsIT09UGgpe3ZhciBnPVdoLmJpbmQobnVsbCxhLGQpO1FoPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gQWUoZyl9KTtSaD1nfUtoPU9oPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBRZSYmUWUoYi5zdGF0ZU5vZGUpO2M9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPVxuYj5jP2I6YzswPT09YiYmKEZoPW51bGwpOyRoKGEsYil9XG5mdW5jdGlvbiBhaShhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7VD1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpRWcoYiksYi5lZmZlY3RUYWcmPS0zO21oKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpbmgoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBsPUlmKE4uY3VycmVudCk7aWYoRWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxwPWg7ZVtGYV09ZztlW0dhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxhYi5sZW5ndGg7aysrKUUoYWJba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLGUpO0UoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixlKTtFKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MoZSxtKTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UoZSxtKSxFKFwiaW52YWxpZFwiLGUpLHNlKHAsXCJvbkNoYW5nZVwiKX1xZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmc2UocCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlJiKGUpO0FjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIoZSk7ZWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXRlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYma2goYil9ZWxzZXttPWI7cD1mO2U9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1mZS5odG1sJiYobD1nZShwKSk7bD09PWZlLmh0bWw/XCJzY3JpcHRcIj09PXA/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZS5pcz9rPWsuY3JlYXRlRWxlbWVudChwLHtpczplLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KHApLFwic2VsZWN0XCI9PT1wJiYocD1rLGUubXVsdGlwbGU/cC5tdWx0aXBsZT0hMDplLnNpemUmJihwLnNpemU9ZS5zaXplKSkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxwKTtlPWs7ZVtGYV09bTtlW0dhXT1nO2xoKGUsYiwhMSwhMSk7cD1lO2s9ZjttPWc7dmFyIHQ9aCxBPXJlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixcbnApO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWIubGVuZ3RoO2grKylFKGFiW2hdLHApO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLHApO0UoXCJsb2FkXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIscCk7RShcInN1Ym1pdFwiLHApO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixwKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MocCxtKTtoPXZjKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9JGQocCxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShwLFxubSk7aD1iZShwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXFlKGssaCk7bD12b2lkIDA7dmFyIHY9ayxSPXAsdT1oO2ZvcihsIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHE9dVtsXTtcInN0eWxlXCI9PT1sP29lKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZqZShSLHEpKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09dnx8XCJcIiE9PXEpJiZrZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYma2UoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihyYS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1xJiZzZSh0LGwpOm51bGwhPXEmJnRjKFIsbCxxLEEpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6UmIocCk7XG5BYyhwLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKHApO2VlKHAsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnAuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3VjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1wO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3A9bS52YWx1ZTtudWxsIT1wP2FlKGgsISFtLm11bHRpcGxlLHAsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZhZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocC5vbmNsaWNrPXRlKX0oZz13ZShmLGcpKSYma2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/b2goZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTi5jdXJyZW50KSxFZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltGYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZraChiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tGYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7VD1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6S2YoYik7bWgoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAxODpicmVhaztkZWZhdWx0OngoXCIxNTZcIil9VD1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVQpcmV0dXJuIFQ7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmXG4oYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdoKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJpKGEpe3ZhciBiPVRnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1haShhKSk7SWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gY2koYSxiKXtLaD94KFwiMjQzXCIpOnZvaWQgMDtvZigpO0toPSEwO3ZhciBjPUhoLmN1cnJlbnQ7SGguY3VycmVudD1rZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1VfHxhIT09TGh8fG51bGw9PT1UKVNoKCksTGg9YSxVPWQsVD1YZShMaC5jdXJyZW50LG51bGwsVSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1UJiYhZGkoKTspVD1iaShUKTtlbHNlIGZvcig7bnVsbCE9PVQ7KVQ9YmkoVCl9Y2F0Y2godSl7aWYoWWc9WGc9V2c9bnVsbCxsZygpLG51bGw9PT1UKWU9ITAsRGgodSk7ZWxzZXtudWxsPT09VD94KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1ULGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEaCh1KTtlbHNle2E6e3ZhciBoPWEsbD1nLGs9ZixtPXU7Zz1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PVxubSYmXCJvYmplY3RcIj09PXR5cGVvZiBtJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS50aGVuKXt2YXIgcD1tO209bDt2YXIgdD0tMSxBPS0xO2Rve2lmKDEzPT09bS50YWcpe3ZhciB2PW0uYWx0ZXJuYXRlO2lmKG51bGwhPT12JiYodj12Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXYpKXtBPTEwKigxMDczNzQxODIyLXYudGltZWRPdXRBdCk7YnJlYWt9dj1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHYpaWYoMD49dil0PTA7ZWxzZSBpZigtMT09PXR8fHY8dCl0PXZ9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1sO2Rve2lmKHY9MTM9PT1tLnRhZyl2PXZvaWQgMD09PW0ubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bS5tZW1vaXplZFN0YXRlO2lmKHYpe2w9bS51cGRhdGVRdWV1ZTtudWxsPT09bD8obD1uZXcgU2V0LGwuYWRkKHApLG0udXBkYXRlUXVldWU9bCk6bC5hZGQocCk7aWYoMD09PShtLm1vZGUmMSkpe20uZWZmZWN0VGFnfD1cbjY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KGc9bmYoMTA3Mzc0MTgyMyksZy50YWc9c2YscGYoayxnKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtsPWc7dmFyIFI9ay5waW5nQ2FjaGU7bnVsbD09PVI/KFI9ay5waW5nQ2FjaGU9bmV3IEJoLHY9bmV3IFNldCxSLnNldChwLHYpKToodj1SLmdldChwKSx2b2lkIDA9PT12JiYodj1uZXcgU2V0LFIuc2V0KHAsdikpKTt2LmhhcyhsKXx8KHYuYWRkKGwpLGs9ZWkuYmluZChudWxsLGsscCxsKSxwLnRoZW4oayxrKSk7LTE9PT10P2g9MTA3Mzc0MTgyMzooLTE9PT1BJiYoQT0xMCooMTA3Mzc0MTgyMi1nZihoLGcpKS01RTMpLGg9QSt0KTswPD1oJiZNaDxoJiYoTWg9aCk7bS5lZmZlY3RUYWd8PTIwNDg7bS5leHBpcmF0aW9uVGltZT1nO2JyZWFrIGF9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1FcnJvcigoaWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcblwiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIramMoaykpfU5oPSEwO209amgobSxrKTtoPWw7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5lZmZlY3RUYWd8PTIwNDg7aC5leHBpcmF0aW9uVGltZT1nO2c9Q2goaCxtLGcpO2VoKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYodD1tLEE9aC50eXBlLGs9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1rJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhrKSkpKXtoLmVmZmVjdFRhZ3w9MjA0ODtcbmguZXhwaXJhdGlvblRpbWU9ZztnPUVoKGgsdCxnKTtlaChoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVQ9YWkoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtLaD0hMTtIaC5jdXJyZW50PWM7WWc9WGc9V2c9bnVsbDtsZygpO2lmKGUpTGg9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVQpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2M9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yz94KFwiMjgxXCIpOnZvaWQgMDtMaD1udWxsO2lmKE5oKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8ZHx8MCE9PWYmJmY8ZHx8MCE9PWcmJmc8ZCl7ZmYoYSxkKTtmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7ZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7XG5iPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztmaShhLGMsZCxiLC0xKTtyZXR1cm59fWImJi0xIT09TWg/KGZmKGEsZCksYj0xMCooMTA3Mzc0MTgyMi1nZihhLGQpKSxiPE1oJiYoTWg9YiksYj0xMCooMTA3Mzc0MTgyMi1sZigpKSxiPU1oLWIsZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQsYS5maW5pc2hlZFdvcms9Yyl9fVxuZnVuY3Rpb24gc2goYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoZCkpKXthPWpoKGIsYSk7YT1FaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT1qaChiLGEpO2E9Q2goYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPWpoKGIsYSksYz1DaChhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxxZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIG1mKGEsYil7dmFyIGM9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpLGQ9dm9pZCAwO2lmKDA9PT0oYi5tb2RlJjEpKWQ9MTA3Mzc0MTgyMztlbHNlIGlmKEtoJiYhT2gpZD1VO2Vsc2V7c3dpdGNoKGMpe2Nhc2Ugci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTpkPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTpkPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX0xvd1ByaW9yaXR5OmNhc2Ugci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6ZD0xO2JyZWFrO2RlZmF1bHQ6eChcIjMxM1wiKX1udWxsIT09TGgmJmQ9PT1VJiYtLWR9Yz09PXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkmJlxuKDA9PT1naXx8ZDxnaSkmJihnaT1kKTtyZXR1cm4gZH1mdW5jdGlvbiBlaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1MaCYmVT09PWMpTGg9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztkZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKX19ZnVuY3Rpb24gQWgoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1sZigpO2I9bWYoYixhKTthPWhpKGEsYik7bnVsbCE9PWEmJihjZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmWGgoYSxiKSl9XG5mdW5jdGlvbiBoaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gcWYoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighS2gmJjAhPT1VJiZiPlUmJlNoKCksY2YoYSxiKSxLaCYmIU9oJiZMaD09PWF8fFhoKGEsYS5leHBpcmF0aW9uVGltZSksaWk+amkmJihpaT0wLHgoXCIxODVcIikpKX1mdW5jdGlvbiBraShhLGIsYyxkLGUpe3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX12YXIgbGk9bnVsbCxZPW51bGwsbWk9MCxuaT12b2lkIDAsVz0hMSxvaT1udWxsLFo9MCxnaT0wLHBpPSExLHFpPW51bGwsWD0hMSxyaT0hMSxzaT1udWxsLHRpPXIudW5zdGFibGVfbm93KCksdWk9MTA3Mzc0MTgyMi0odGkvMTB8MCksdmk9dWksamk9NTAsaWk9MCx3aT1udWxsO2Z1bmN0aW9uIHhpKCl7dWk9MTA3Mzc0MTgyMi0oKHIudW5zdGFibGVfbm93KCktdGkpLzEwfDApfVxuZnVuY3Rpb24geWkoYSxiKXtpZigwIT09bWkpe2lmKGI8bWkpcmV0dXJuO251bGwhPT1uaSYmci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhuaSl9bWk9YjthPXIudW5zdGFibGVfbm93KCktdGk7bmk9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHppLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8ZGkoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9eWUoQWkuYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gQWkoYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9Yjt4aSgpO3ZpPXVpO0JpKGEsYyl9ZnVuY3Rpb24gJGgoYSxiKXthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIGxmKCl7aWYoVylyZXR1cm4gdmk7Q2koKTtpZigwPT09Wnx8MT09PVopeGkoKSx2aT11aTtyZXR1cm4gdml9ZnVuY3Rpb24gWGgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1ZPyhsaT1ZPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWT1ZLm5leHRTY2hlZHVsZWRSb290PWEsWS5uZXh0U2NoZWR1bGVkUm9vdD1saSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFg/cmkmJihvaT1hLFo9MTA3Mzc0MTgyMyxEaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9ZaCgxMDczNzQxODIzLCExKTp5aShhLGIpKX1cbmZ1bmN0aW9uIENpKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVkpZm9yKHZhciBjPVksZD1saTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WT94KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGk9WT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGkpbGk9ZT1kLm5leHRTY2hlZHVsZWRSb290LFkubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WSl7WT1jO1kubmV4dFNjaGVkdWxlZFJvb3Q9bGk7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WSlicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fW9pPWI7Wj1hfXZhciBFaT0hMTtmdW5jdGlvbiBkaSgpe3JldHVybiBFaT8hMDpyLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/RWk9ITA6ITF9ZnVuY3Rpb24gemkoKXt0cnl7aWYoIWRpKCkmJm51bGwhPT1saSl7eGkoKTt2YXIgYT1saTtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZ1aTw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249dWkpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09bGkpfVloKDAsITApfWZpbmFsbHl7RWk9ITF9fVxuZnVuY3Rpb24gWWgoYSxiKXtDaSgpO2lmKGIpZm9yKHhpKCksdmk9dWk7bnVsbCE9PW9pJiYwIT09WiYmYTw9WiYmIShFaSYmdWk+Wik7KURpKG9pLFosdWk+WiksQ2koKSx4aSgpLHZpPXVpO2Vsc2UgZm9yKDtudWxsIT09b2kmJjAhPT1aJiZhPD1aOylEaShvaSxaLCExKSxDaSgpO2ImJihtaT0wLG5pPW51bGwpOzAhPT1aJiZ5aShvaSxaKTtpaT0wO3dpPW51bGw7aWYobnVsbCE9PXNpKWZvcihhPXNpLHNpPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7cGl8fChwaT0hMCxxaT1kKX19aWYocGkpdGhyb3cgYT1xaSxxaT1udWxsLHBpPSExLGE7fWZ1bmN0aW9uIEJpKGEsYil7Vz94KFwiMjUzXCIpOnZvaWQgMDtvaT1hO1o9YjtEaShhLGIsITEpO1loKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gRGkoYSxiLGMpe1c/eChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihkaSgpP2EuZmluaXNoZWRXb3JrPWQ6RmkoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmRmkoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gRmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09c2k/c2k9W2RdOnNpLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09d2k/aWkrKzood2k9YSxpaT0wKTtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7WmgoYSxiKX0pfWZ1bmN0aW9uIERoKGEpe251bGw9PT1vaT94KFwiMjQ2XCIpOnZvaWQgMDtvaS5leHBpcmF0aW9uVGltZT0wO3BpfHwocGk9ITAscWk9YSl9ZnVuY3Rpb24gR2koYSxiKXt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFg9Yyl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEhpKGEsYil7aWYoWCYmIXJpKXtyaT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtyaT0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gSWkoYSxiLGMpe1h8fFd8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKTt2YXIgZD1YO1g9ITA7dHJ5e3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjKX0pfWZpbmFsbHl7KFg9ZCl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEppKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWVkKGMpJiYxPT09Yy50YWc/dm9pZCAwOngoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoSihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3goXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoSihoKSl7Yz1OZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1IZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5vZigpO3BmKGYsZSk7cWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBLaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1sZigpO2U9bWYoZixlKTtyZXR1cm4gSmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBMaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIE1pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6V2Isa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5BYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOnljKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtlP3ZvaWQgMDp4KFwiOTBcIik7U2IoZCk7eWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZhZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gTmkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWxmKCkrNTAwKS8yNXwwKSsxKTtiPj1KaCYmKGI9SmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfU5pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOngoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBPaTtKaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5OaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5OaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6eChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD94KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0JpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O05pLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBPaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfU9pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5PaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFBpKGEsYixjKXtiPUsoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuUGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBPaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7S2koYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtQaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgT2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO0tpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307UGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IE9pO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtLaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuUGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE5pKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gUWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUdiPUdpO0hiPUlpO0liPWZ1bmN0aW9uKCl7V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApfTtcbmZ1bmN0aW9uIFJpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgUGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVJpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1IaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gTGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFRpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIE1pKGEsYixudWxsLGMpfVxudmFyIFZpPXtjcmVhdGVQb3J0YWw6VGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj94KFwiMTg4XCIpOngoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9aGQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtRaShjKT92b2lkIDA6eChcIjIwMFwiKTtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/XG54KFwiMzhcIik6dm9pZCAwO3JldHVybiBTaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtRaShhKT92b2lkIDA6eChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhpKGZ1bmN0aW9uKCl7U2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gVGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOkdpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpJaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3goXCIxODdcIik6dm9pZCAwO3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGtpKGEsYil9ZmluYWxseXtYPWMsWWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OlVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1cblg7WD0hMDt0cnl7a2koYSl9ZmluYWxseXsoWD1iKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscGEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEViLEZiLERkLERhXX19O2Z1bmN0aW9uIFVpKGEsYil7UWkoYSk/dm9pZCAwOngoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBQaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBUZShuKHt9LGEse292ZXJyaWRlUHJvcHM6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi44LjZcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgV2k9e2RlZmF1bHQ6Vml9LFhpPVdpJiZWaXx8V2k7bW9kdWxlLmV4cG9ydHM9WGkuZGVmYXVsdHx8WGk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjEzLjZcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD1udWxsLGU9ITEsZz0zLGs9LTEsbD0tMSxtPSExLG49ITE7ZnVuY3Rpb24gcCgpe2lmKCFtKXt2YXIgYT1kLmV4cGlyYXRpb25UaW1lO24/cSgpOm49ITA7cih0LGEpfX1cbmZ1bmN0aW9uIHUoKXt2YXIgYT1kLGI9ZC5uZXh0O2lmKGQ9PT1iKWQ9bnVsbDtlbHNle3ZhciBjPWQucHJldmlvdXM7ZD1jLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBmPWcsUT1sO2c9YTtsPWI7dHJ5e3ZhciBoPWMoKX1maW5hbGx5e2c9ZixsPVF9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgpaWYoaD17Y2FsbGJhY2s6aCxwcmlvcml0eUxldmVsOmEsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH0sbnVsbD09PWQpZD1oLm5leHQ9aC5wcmV2aW91cz1oO2Vsc2V7Yz1udWxsO2E9ZDtkb3tpZihhLmV4cGlyYXRpb25UaW1lPj1iKXtjPWE7YnJlYWt9YT1hLm5leHR9d2hpbGUoYSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9aCxwKCkpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1oO2gubmV4dD1jO2gucHJldmlvdXM9XG5ifX1mdW5jdGlvbiB2KCl7aWYoLTE9PT1rJiZudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl7bT0hMDt0cnl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKX1maW5hbGx5e209ITEsbnVsbCE9PWQ/cCgpOm49ITF9fX1mdW5jdGlvbiB0KGEpe209ITA7dmFyIGI9ZTtlPWE7dHJ5e2lmKGEpZm9yKDtudWxsIT09ZDspe3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoZC5leHBpcmF0aW9uVGltZTw9Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPD1jKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWQpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmIXcoKSl9fWZpbmFsbHl7bT0hMSxlPWIsbnVsbCE9PWQ/cCgpOm49ITEsdigpfX1cbnZhciB4PURhdGUseT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZTp2b2lkIDAsQyxEO2Z1bmN0aW9uIEUoYSl7Qz1BKGZ1bmN0aW9uKGIpe3ooRCk7YShiKX0pO0Q9eShmdW5jdGlvbigpe0IoQyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX1cbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBGPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEYubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKX07dmFyIHIscSx3LEc9bnVsbDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdz9HPXdpbmRvdzpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbCYmKEc9Z2xvYmFsKTtcbmlmKEcmJkcuX3NjaGVkTW9jayl7dmFyIEg9Ry5fc2NoZWRNb2NrO3I9SFswXTtxPUhbMV07dz1IWzJdO2V4cG9ydHMudW5zdGFibGVfbm93PUhbM119ZWxzZSBpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgST1udWxsLEo9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUkpdHJ5e0koYSl9ZmluYWxseXtJPW51bGx9fTtyPWZ1bmN0aW9uKGEpe251bGwhPT1JP3NldFRpbWVvdXQociwwLGEpOihJPWEsc2V0VGltZW91dChKLDAsITEpKX07cT1mdW5jdGlvbigpe0k9bnVsbH07dz1mdW5jdGlvbigpe3JldHVybiExfX1lbHNle1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7dmFyIEs9bnVsbCxMPSExLE09LTEsTj0hMSxPPSExLFA9MCxSPTMzLFM9MzM7dz1mdW5jdGlvbigpe3JldHVybiBQPD1leHBvcnRzLnVuc3RhYmxlX25vdygpfTt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7TD0hMTt2YXIgYT1LLGI9TTtLPW51bGw7TT0tMTt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpLGY9ITE7aWYoMD49UC1jKWlmKC0xIT09YiYmYjw9YylmPSEwO2Vsc2V7Tnx8KE49ITAsRShWKSk7Sz1hO009YjtyZXR1cm59aWYobnVsbCE9PWEpe089ITA7dHJ5e2EoZil9ZmluYWxseXtPPSExfX19O1xudmFyIFY9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUspe0UoVik7dmFyIGI9YS1QK1M7YjxTJiZSPFM/KDg+YiYmKGI9OCksUz1iPFI/UjpiKTpSPWI7UD1hK1M7THx8KEw9ITAsVS5wb3N0TWVzc2FnZSh2b2lkIDApKX1lbHNlIE49ITF9O3I9ZnVuY3Rpb24oYSxiKXtLPWE7TT1iO098fDA+Yj9VLnBvc3RNZXNzYWdlKHZvaWQgMCk6Tnx8KE49ITAsRShWKSl9O3E9ZnVuY3Rpb24oKXtLPW51bGw7TD0hMTtNPS0xfX1leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9ZyxmPWs7Zz1hO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChnKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1nfXZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGcpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6ZyxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBmPWQ7ZG97aWYoZi5leHBpcmF0aW9uVGltZT5iKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1nO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2c9YyxrPWYsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gZ307XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWUmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWQmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBkfTtcbiIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtmdW5jdGlvbiB0KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgcjpjYXNlIHE6Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gdihhKXtyZXR1cm4gdChhKT09PW19ZXhwb3J0cy50eXBlT2Y9dDtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47XG5leHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXI7ZXhwb3J0cy5NZW1vPXE7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bil9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSl8fHQoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9djtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09a307XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1yfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXF9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWZ9O1xuZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgeCA9PiBgJSR7eC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRva2VuID0gJyVbYS1mMC05XXsyfSc7XG52YXIgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAodG9rZW4sICdnaScpO1xudmFyIG11bHRpTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKSsnLCAnZ2knKTtcblxuZnVuY3Rpb24gZGVjb2RlQ29tcG9uZW50cyhjb21wb25lbnRzLCBzcGxpdCkge1xuXHR0cnkge1xuXHRcdC8vIFRyeSB0byBkZWNvZGUgdGhlIGVudGlyZSBzdHJpbmcgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0cmluZywgc2VwYXJhdG9yKSA9PiB7XG5cdGlmICghKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCcpO1xuXHR9XG5cblx0aWYgKHNlcGFyYXRvciA9PT0gJycpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG5cblx0aWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdHJldHVybiBbXG5cdFx0c3RyaW5nLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KSxcblx0XHRzdHJpbmcuc2xpY2Uoc2VwYXJhdG9ySW5kZXggKyBzZXBhcmF0b3IubGVuZ3RoKVxuXHRdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dCQkMS5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dCQkMS5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0JCQxLmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0JCQxLnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIG9wdGlvbnMgPSB7XG4gICAgcGF0aDogb3B0aW9uc1xuICB9O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGgpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuKHByb3BzKTtcblxuICAgICAgICBpZiAoY2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gX3RoaXMucHJvcHMucGF0aDtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBjaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogcHJvcHMubWF0Y2ggPyBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkJDEubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQkJDEubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCQkMSwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHdpdGhSb3V0ZXIsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0IH07XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgKiBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpbmsucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50LCBoaXN0b3J5KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aHJvdyBleDtcbiAgICB9XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICF0aGlzLnByb3BzLnRhcmdldCB8fCB0aGlzLnByb3BzLnRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnByb3BzLnJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZCh0aGlzLnByb3BzLnRvKTtcbiAgICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50byxcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJpbm5lclJlZlwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGNvbnRleHQubG9jYXRpb24pIDogdG87XG4gICAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gY29udGV4dC5oaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUNsaWNrKGV2ZW50LCBjb250ZXh0Lmhpc3RvcnkpO1xuICAgICAgICB9LFxuICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICByZWY6IGlubmVyUmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKTtcbiAgdmFyIGlubmVyUmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IGlubmVyUmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCJdKTtcblxuICB2YXIgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcGF0aFRvTWF0Y2ggPSBsb2NhdGlvblByb3AgPyBsb2NhdGlvblByb3AucGF0aG5hbWUgOiBjb250ZXh0LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKHBhdGhUb01hdGNoLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY29udGV4dC5sb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGVQcm9wLCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvXG4gICAgfSwgcmVzdCkpO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpOyAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG5cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbnZhciBQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZTtcbiAgICBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycyA9IF90aGlzLm5vdGlmeVN1YnNjcmliZXJzLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IF90aGlzLm5vdGlmeVN1YnNjcmliZXJzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICAgIF90aGlzLnByZXZpb3VzU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmICh0aGlzLnByZXZpb3VzU3RhdGUgIT09IHRoaXMucHJvcHMuc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdG9yZSAhPT0gcHJldlByb3BzLnN0b3JlKSB7XG4gICAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5wcm9wcy5zdG9yZSk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHRoaXMubm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RvcmU6IHRoaXMucHJvcHMuc3RvcmUsXG4gICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeVN1YnNjcmliZXJzID0gZnVuY3Rpb24gbm90aWZ5U3Vic2NyaWJlcnMoKSB7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIENvbnRleHQgPSB0aGlzLnByb3BzLmNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGVcbiAgICB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxufTtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCBiZWNhdXNlIHdlIHdhbnRcbi8vIGBjb25uZWN0YCB0byBwZXJmb3JtIHN5bmMgdXBkYXRlcyB0byBhIHJlZiB0byBzYXZlIHRoZSBsYXRlc3QgcHJvcHMgYWZ0ZXJcbi8vIGEgcmVuZGVyIGlzIGFjdHVhbGx5IGNvbW1pdHRlZCB0byB0aGUgRE9NLlxuXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpbnZhcmlhbnQocmVuZGVyQ291bnRQcm9wID09PSB1bmRlZmluZWQsIFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gIGludmFyaWFudCghd2l0aFJlZiwgJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgdmFyIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UgPSAnVG8gdXNlIGEgY3VzdG9tIFJlZHV4IHN0b3JlIGZvciBzcGVjaWZpYyBjb21wb25lbnRzLCBjcmVhdGUgYSBjdXN0b20gUmVhY3QgY29udGV4dCB3aXRoICcgKyBcIlJlYWN0LmNyZWF0ZUNvbnRleHQoKSwgYW5kIHBhc3MgdGhlIGNvbnRleHQgb2JqZWN0IHRvIFJlYWN0IFJlZHV4J3MgUHJvdmlkZXIgYW5kIHNwZWNpZmljIGNvbXBvbmVudHNcIiArICcgbGlrZTogPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuICBpbnZhcmlhbnQoc3RvcmVLZXkgPT09ICdzdG9yZScsICdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpLCBcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIGZvcndhcmRlZFJlZiA9IHByb3BzLmZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJmb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgZm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgZm9yd2FyZGVkUmVmID0gX3VzZU1lbW9bMV0sXG4gICAgICAgICAgd3JhcHBlclByb3BzID0gX3VzZU1lbW9bMl07XG5cbiAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgaXNDb250ZXh0Q29uc3VtZXIoUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHRcblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcbiAgICAgIGludmFyaWFudChkaWRTdG9yZUNvbWVGcm9tUHJvcHMgfHwgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQsIFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgdmFyIHN0b3JlID0gcHJvcHMuc3RvcmUgfHwgY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgICAgICAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gICAgICAgIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gICAgICAgIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICAgICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgICAgICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgICAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgICAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAgICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICBsYXRlc3RTdG9yZVN0YXRlOiBsYXRlc3RTdG9yZVN0YXRlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgICAgICAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICAgICAgICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICAgICAgICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgICAgICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcblxuICAgICAgICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAgICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgICAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgICAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbiAgICAgIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbZm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gIH1cblxuICBpbnZhcmlhbnQoc2VsZWN0b3IsIFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcblxuICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBzZWxlY3RpbmcgdGhlIHN0b3JlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlICsgXCIuXCI7XG5cbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5PcmlnaW5hbCBzdGFjayB0cmFjZTpcIjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59IiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciwgdXNlU3RvcmUsIHNoYWxsb3dFcXVhbCB9OyIsIi8vIGNvbnRhaW5pbmcgYWxsIGFjdGlvbnNcbmV4cG9ydCBkZWZhdWx0IHsgR0VUX1dFTENPTUU6ICdHRVRfV0VMQ09NRScgfTtcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmxldCBpbnN0YW5jZTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XG4gIGluc3RhbmNlID0gYXhpb3MuY3JlYXRlKHtcbiAgICBiYXNlVVJMOiAnaHR0cHM6Ly9hdXRob3JzLWhlYXZlbi5oZXJva3VhcHAuY29tLydcbiAgfSk7XG59IGVsc2Uge1xuICBpbnN0YW5jZSA9IGF4aW9zO1xufVxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2U7XG4iLCJpbXBvcnQgdHlwZXMgZnJvbSAnLic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnLi4vLi4vLi4vY29uZmlncy9heGlvcyc7XG5cbmNvbnN0IHsgR0VUX1dFTENPTUUgfSA9IHR5cGVzO1xuXG4vKipcbiAqIGV4YW1wbGUgb2YgYSByZWR1Y2VyXG4gKiB5b3UgY2FuIGV4cG9ydCBpdCBhcyBhbiBvYmplY3Qgb2YgZnVuY3Rpb25zKGFjdGlvbnMpXG4gKiBvciB5b3UgY2FuIGV4cG9ydCBvbmUgYnkgb25lIGFuZCBhY2Nlc3MgdGhlbSBpbiB5b3VyIGNvbXBvbmVudFxuICpcbiAqICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFdlbGNvbWU6ICgpID0+IGRpc3BhdGNoID0+IGF4aW9zXG4gICAgLmdldCgnLycpXG4gIC8vIEkgZGlzcGF0Y2ggdGhlIGFjdGlvbiBwYXNzaW5nIGRhdGEgYXMgcGF5bG9hZFxuICAgIC50aGVuKHJlc3BvbnNlID0+IGRpc3BhdGNoKHsgdHlwZTogR0VUX1dFTENPTUUsIHBheWxvYWQ6IHJlc3BvbnNlLmRhdGEgfSkpXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHRlc3RSZWR1eEFjdGlvbiBmcm9tICcuLi8uLi9SZWR1eC9BY3Rpb25zL3Rlc3RSZWR1eEFjdGlvbnMnO1xuXG5jb25zdCB7IGdldFdlbGNvbWUgfSA9IHRlc3RSZWR1eEFjdGlvbjtcbi8qKlxuICpcbiAqVGhpcyBjbGFzcyBpcyBqdXN0IGZvciBzaG93aW5nIGhvdyB3ZSB3aWxsIHVzZSBSZWR1eCxcbiAqIE9uY2UgdGhlIGhvbWUgcGFnZSB3aWxsIGJlIGRvbmUsIHdpbGwgbm8gbG9uZ2VyIGJlIG5lZWRlZFxuICogQGV4cG9ydFxuICogQGNsYXNzIFRlc3RSZWR1eFxuICogQGV4dGVuZHMge0NvbXBvbmVudH1cbiAqL1xuZXhwb3J0IGNsYXNzIFRlc3RSZWR1eCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZ2V0V2VsY29tZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8cD5cbiAgICAgICAgICBtZXNzYWdlIGxvYWRlZCBmcm9tIHJlZHV4OlxuICAgICAgICAgIHt0aGlzLnByb3BzLmRhdGEgPyB0aGlzLnByb3BzLmRhdGEubWVzc2FnZSA6ICcnfVxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblRlc3RSZWR1eC5wcm9wVHlwZXMgPSB7IGdldFdlbGNvbWU6IHByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQgfTtcblxuLy8gZ2V0IGRhdGEgZnJvbSByZWR1eCBhbmQgcHV0IGl0IGluIHByb3BzXG5leHBvcnQgY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHsgZGF0YTogc3RhdGUudGVzdFJlZHV4LmRhdGEgfSk7XG5cbi8vIGV4cG9ydCB0aGUgY29tcG9uZW50IHdoaWxlIGNvbm5lY3RpbmcgdG8gcmVkdXhcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLFxuICB7IGdldFdlbGNvbWUgfSkoVGVzdFJlZHV4KTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgV2VsY29tZSBmcm9tICcuLi9UZXN0UmVkdXgnO1xuXG5leHBvcnQgY2xhc3MgSG9tZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8aDE+QXV0aG9ycyBIZWF2ZW48L2gxPlxuICAgICAgICA8cD5UaGlzIGlzIHRoZSBob21lIHBhZ2Ugb2YgYXV0aG9ycyBoZWF2ZW4gdiAxLjAuMDwvcD5cbiAgICAgICAgPFdlbGNvbWUgLz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgTm90Rm91bmQgPSAoKSA9PiAoXG4gIDxSZWFjdC5GcmFnbWVudD5cbiAgICA8aDE+QXV0aG9ycyBIZWF2ZW48L2gxPlxuICAgIDxoMj40MDQ8L2gyPlxuICAgIDxwPlRoZSBwYWdlIHlvdSBhcmUgc2VhcmNoaW5nIGZvciB3YXMgbm90IGZvdW5kPC9wPlxuICA8L1JlYWN0LkZyYWdtZW50PlxuKTtcbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgU2VwYXJhdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9yLXNlcGFyYXRvclwiPlxuICAgICAgICA8Yj5vcjwvYj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VwYXJhdG9yO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTZXBhcmF0b3IgZnJvbSAnLi4vU2VwYXJhdG9yL29yX3NlcGFyYXRvcic7XG5cbmNsYXNzIFNvY2lhbExvZ2luIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gc3RhdGUgPSB7IHRva2VuOiAnJyB9O1xuXG4gICAgZmFjZWJvb2tMaW5rID0gJ2h0dHBzOi8vYXV0aG9ycy1oZWF2ZW4uaGVyb2t1YXBwLmNvbS9hcGkvdXNlcnMvZmFjZWJvb2snO1xuXG4gICAgdHdpdHRlckxpbmsgPSAnaHR0cHM6Ly9hdXRob3JzLWhlYXZlbi5oZXJva3VhcHAuY29tL2FwaS91c2Vycy90d2l0dGVyJztcblxuICAgIGdvb2dsZUxpbmsgPSAnaHR0cHM6Ly9hdXRob3JzLWhlYXZlbi5oZXJva3VhcHAuY29tL2FwaS91c2Vycy9nb29nbGUnO1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG5cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNvY2lhbC1idG4gdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICAgICAgPGEgaHJlZj17dGhpcy5mYWNlYm9va0xpbmt9IGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tbGdcIiB0aXRsZT1cIkZhY2Vib29rXCI+PGkgY2xhc3NOYW1lPVwiZmFiIGZhLWZhY2Vib29rLWZcIiAvPjwvYT5cbiAgICAgICAgICA8YSBocmVmPXt0aGlzLnR3aXR0ZXJMaW5rfSBjbGFzc05hbWU9XCJidG4gYnRuLWluZm8gYnRuLWxnXCIgdGl0bGU9XCJUd2l0dGVyXCI+PGkgY2xhc3NOYW1lPVwiZmFiIGZhLXR3aXR0ZXJcIiAvPjwvYT5cbiAgICAgICAgICA8YSBocmVmPXt0aGlzLmdvb2dsZUxpbmt9IGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyIGJ0bi1sZ1wiIHRpdGxlPVwiR29vZ2xlXCI+PGkgY2xhc3NOYW1lPVwiZmFiIGZhLWdvb2dsZVwiIC8+PC9hPlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvY2lhbExvZ2luO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBxdWVyeVN0cmluZyBmcm9tICdxdWVyeS1zdHJpbmcnO1xuaW1wb3J0IFNvY2lhbExvZ2luIGZyb20gJy4uL1NvY2lhbExvZ2luL3NvY2lhbExvZ2luJztcblxuY29uc3QgTG9naW4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyB0b2tlbiB9ID0gcXVlcnlTdHJpbmcucGFyc2UocHJvcHMubG9jYXRpb24uc2VhcmNoKTtcbiAgY29uc29sZS5sb2coJz4+Pj4+JywgdG9rZW4pO1xuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxoMT5BdXRob3JzIEhlYXZlbi9Mb2dpbjwvaDE+XG4gICAgICA8cD5UaGkgaXMgdGhlIGxvZ2luIHBhZ2U8L3A+XG4gICAgICA8U29jaWFsTG9naW4gdG9rZW49e3Rva2VufSAvPlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcbiIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IGFjdGlvbnMgZnJvbSAnLi4vQWN0aW9ucyc7XG5cbmNvbnN0IHsgR0VUX1dFTENPTUUgfSA9IGFjdGlvbnM7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHsgZGF0YToge30gfTtcblxuLyoqXG4gKiB0aGUgZGF0YSBpcyBpbiB0aGUgYWN0aW9uIG9iamVjdCBpbiBteSBjYXNlIGlcbiAqcGFzc2VkIGl0IGFzIHBheWxvYWQgaW4gbXkgZ2V0V2VsY29tZSBhY3Rpb24gd2hlbiBkaXNwYXRjaGluZ1xuICovXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBHRVRfV0VMQ09NRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkYXRhOiBhY3Rpb24ucGF5bG9hZC5kYXRhXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCByb290UmVkdWNlciBmcm9tICcuL1JlZHVjZXJzL2luZGV4JztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge307XG5jb25zdCBtaWRkbGV3YXJlID0gW3RodW5rXTtcblxuY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdG9yZShyb290UmVkdWNlcixcbiAgaW5pdGlhbFN0YXRlLFxuICBpc0RldmVsb3BtZW50XG4gICAgPyBjb21wb3NlKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKSxcbiAgICAgIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKCkpXG4gICAgOiBjb21wb3NlKGFwcGx5TWlkZGxld2FyZSguLi5taWRkbGV3YXJlKSkpO1xuIiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRlc3RSZWR1eFJlZHVjZXIgZnJvbSAnLi90ZXN0UmVkdXhSZWR1Y2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHsgdGVzdFJlZHV4OiB0ZXN0UmVkdXhSZWR1Y2VyIH0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgU3dpdGNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBIb21lIGZyb20gJy4vQ29tcG9uZW50cy9Ib21lL0hvbWUnO1xuaW1wb3J0IE5vdEZvdW5kIGZyb20gJy4vQ29tcG9uZW50cy9Ob3RGb3VuZC9Ob3RGb3VuZCc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi9Db21wb25lbnRzL0xvZ2luL0xvZ2luJztcbmltcG9ydCBzdG9yZSBmcm9tICcuLi9SZWR1eC9zdG9yZSc7XG5cbi8qKlxuICpcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQXBwXG4gKiBAZXh0ZW5kcyB7cmVhY3QtQ29tcG9uZW50fVxuICovXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gcmVuZGVyIHRoZSBwYWdlXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHJlbmRlciB7cGFnZX0gcmVxIHRoZSByZXF1ZXN0XG4gICAqIEBtZW1iZXJvZiBBcHBcbiAgICogQHJldHVybnMge0NvbXBvbmVudH0gcmVzXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICA8Um91dGVyPlxuICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0hvbWV9IC8+XG4gICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9sb2dpblwiIGNvbXBvbmVudD17TG9naW59IC8+XG4gICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIipcIiBjb21wb25lbnQ9e05vdEZvdW5kfSAvPlxuICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8L1JvdXRlcj5cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAvQXBwJztcbmltcG9ydCAnLi9TdHlsZS9TYXNzL21haW4uc2Nzcyc7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=